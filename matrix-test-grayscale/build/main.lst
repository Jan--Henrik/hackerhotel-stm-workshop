ARM GAS  /tmp/ccvdBRen.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB45:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include <math.h>
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** 
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** #define FBDEPH 4
  32:Src/main.c    **** #define FBDEPHPOW 16
  33:Src/main.c    **** /* USER CODE END PTD */
  34:Src/main.c    **** 
ARM GAS  /tmp/ccvdBRen.s 			page 2


  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** /* USER CODE END PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  45:Src/main.c    **** SPI_HandleTypeDef hspi1;
  46:Src/main.c    **** DMA_HandleTypeDef hdma_spi1_tx;
  47:Src/main.c    **** 
  48:Src/main.c    **** TIM_HandleTypeDef htim1;
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE BEGIN PV */
  51:Src/main.c    **** uint8_t modCnt = 0;
  52:Src/main.c    **** uint16_t fbuf[FBDEPH][8];
  53:Src/main.c    **** uint16_t cbuf[5]={0x0b07,   //scanLimit no limit
  54:Src/main.c    ****                   0x0900,   //decode mode none
  55:Src/main.c    ****                   0x0c01,   //shutdown off
  56:Src/main.c    ****                   0x0f00,   //display test off
  57:Src/main.c    ****                   0x0a0f};  //intensity max
  58:Src/main.c    **** int16_t color;
  59:Src/main.c    **** uint64_t lastTick;
  60:Src/main.c    **** uint32_t tickTime;
  61:Src/main.c    **** /* USER CODE END PV */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  64:Src/main.c    **** void SystemClock_Config(void);
  65:Src/main.c    **** static void MX_GPIO_Init(void);
  66:Src/main.c    **** static void MX_DMA_Init(void);
  67:Src/main.c    **** static void MX_SPI1_Init(void);
  68:Src/main.c    **** static void MX_TIM1_Init(void);
  69:Src/main.c    **** /* USER CODE BEGIN PFP */
  70:Src/main.c    **** void setPixel(uint8_t x, uint8_t y, int16_t c);
  71:Src/main.c    **** /* USER CODE END PFP */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  74:Src/main.c    **** /* USER CODE BEGIN 0 */
  75:Src/main.c    **** 
  76:Src/main.c    **** /* USER CODE END 0 */
  77:Src/main.c    **** 
  78:Src/main.c    **** /**
  79:Src/main.c    ****   * @brief  The application entry point.
  80:Src/main.c    ****   * @retval int
  81:Src/main.c    ****   */
  82:Src/main.c    **** int main(void)
  83:Src/main.c    **** {
  84:Src/main.c    ****   /* USER CODE BEGIN 1 */
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE END 1 */
  87:Src/main.c    **** 
  88:Src/main.c    **** 
  89:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
ARM GAS  /tmp/ccvdBRen.s 			page 3


  92:Src/main.c    ****   HAL_Init();
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE BEGIN Init */
  95:Src/main.c    **** 
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE END Init */
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* Configure the system clock */
 100:Src/main.c    ****   SystemClock_Config();
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE END SysInit */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* Initialize all configured peripherals */
 107:Src/main.c    ****   MX_GPIO_Init();
 108:Src/main.c    ****   MX_DMA_Init();
 109:Src/main.c    ****   MX_SPI1_Init();
 110:Src/main.c    ****   MX_TIM1_Init();
 111:Src/main.c    ****   /* USER CODE BEGIN 2 */
 112:Src/main.c    ****   HAL_SPI_Init(&hspi1);
 113:Src/main.c    ****   HAL_SPI_Transmit_DMA(&hspi1,cbuf,sizeof(cbuf));
 114:Src/main.c    **** 
 115:Src/main.c    ****   for(uint8_t i = 1; i <= 8; i++){
 116:Src/main.c    ****     for(uint8_t j = 0; j <= FBDEPH-1; j++){
 117:Src/main.c    ****       fbuf[j][i-1] = (i << 8);
 118:Src/main.c    ****     }
 119:Src/main.c    ****   }
 120:Src/main.c    **** 
 121:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim1);
 122:Src/main.c    ****   HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* USER CODE END 2 */
 125:Src/main.c    **** 
 126:Src/main.c    **** 
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* Infinite loop */
 129:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 130:Src/main.c    ****   while (1)
 131:Src/main.c    ****   {
 132:Src/main.c    ****     lastTick = HAL_GetTick();
 133:Src/main.c    ****     for(uint8_t x = 0; x <= 7; x++){
 134:Src/main.c    ****       for(uint8_t y = 0; y <= 7; y++){
 135:Src/main.c    ****         color = 32.0 + sin((10.0*(((x-4)/8.0)*sin(HAL_GetTick()/500.0)+((y-4)/8.0)*cos(HAL_GetTick(
 136:Src/main.c    ****         //color = x*64;
 137:Src/main.c    ****         setPixel(x,y,color);
 138:Src/main.c    ****       }
 139:Src/main.c    ****     }
 140:Src/main.c    ****     tickTime = HAL_GetTick() - lastTick;
 141:Src/main.c    ****     //HAL_SPI_Transmit_DMA(&hspi1,fbuf,8);
 142:Src/main.c    ****     /* USER CODE END WHILE */
 143:Src/main.c    **** 
 144:Src/main.c    ****     /* USER CODE BEGIN 3 */
 145:Src/main.c    ****   }
 146:Src/main.c    ****   /* USER CODE END 3 */
 147:Src/main.c    **** }
 148:Src/main.c    **** 
ARM GAS  /tmp/ccvdBRen.s 			page 4


 149:Src/main.c    **** 
 150:Src/main.c    **** /**
 151:Src/main.c    ****   * @brief System Clock Configuration
 152:Src/main.c    ****   * @retval None
 153:Src/main.c    ****   */
 154:Src/main.c    **** void SystemClock_Config(void)
 155:Src/main.c    **** {
 156:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 157:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 158:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 159:Src/main.c    **** 
 160:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 161:Src/main.c    ****   */
 162:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 163:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 164:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 165:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 166:Src/main.c    ****   {
 167:Src/main.c    ****     Error_Handler();
 168:Src/main.c    ****   }
 169:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 170:Src/main.c    ****   */
 171:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 172:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 173:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 174:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 175:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 176:Src/main.c    **** 
 177:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 178:Src/main.c    ****   {
 179:Src/main.c    ****     Error_Handler();
 180:Src/main.c    ****   }
 181:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 182:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 183:Src/main.c    **** 
 184:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 185:Src/main.c    ****   {
 186:Src/main.c    ****     Error_Handler();
 187:Src/main.c    ****   }
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** /**
 191:Src/main.c    ****   * @brief SPI1 Initialization Function
 192:Src/main.c    ****   * @param None
 193:Src/main.c    ****   * @retval None
 194:Src/main.c    ****   */
 195:Src/main.c    **** static void MX_SPI1_Init(void)
 196:Src/main.c    **** {
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 199:Src/main.c    **** 
 200:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 201:Src/main.c    **** 
 202:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 203:Src/main.c    **** 
 204:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 205:Src/main.c    ****   /* SPI1 parameter configuration*/
ARM GAS  /tmp/ccvdBRen.s 			page 5


 206:Src/main.c    ****   hspi1.Instance = SPI1;
 207:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 208:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 209:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 210:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 211:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 212:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 213:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 214:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 215:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 216:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 217:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 218:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 219:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 220:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     Error_Handler();
 223:Src/main.c    ****   }
 224:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 225:Src/main.c    **** 
 226:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 227:Src/main.c    **** 
 228:Src/main.c    **** }
 229:Src/main.c    **** 
 230:Src/main.c    **** /**
 231:Src/main.c    ****   * @brief TIM1 Initialization Function
 232:Src/main.c    ****   * @param None
 233:Src/main.c    ****   * @retval None
 234:Src/main.c    ****   */
 235:Src/main.c    **** static void MX_TIM1_Init(void)
 236:Src/main.c    **** {
 237:Src/main.c    **** 
 238:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 239:Src/main.c    **** 
 240:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 241:Src/main.c    **** 
 242:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 243:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 244:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 245:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 246:Src/main.c    **** 
 247:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 248:Src/main.c    **** 
 249:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 250:Src/main.c    ****   htim1.Instance = TIM1;
 251:Src/main.c    ****   htim1.Init.Prescaler = 2000;
 252:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 253:Src/main.c    ****   htim1.Init.Period = 99;
 254:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 255:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 256:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 257:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 258:Src/main.c    ****   {
 259:Src/main.c    ****     Error_Handler();
 260:Src/main.c    ****   }
 261:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 262:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
ARM GAS  /tmp/ccvdBRen.s 			page 6


 263:Src/main.c    ****   {
 264:Src/main.c    ****     Error_Handler();
 265:Src/main.c    ****   }
 266:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 267:Src/main.c    ****   {
 268:Src/main.c    ****     Error_Handler();
 269:Src/main.c    ****   }
 270:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 271:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 272:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 273:Src/main.c    ****   {
 274:Src/main.c    ****     Error_Handler();
 275:Src/main.c    ****   }
 276:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 277:Src/main.c    ****   sConfigOC.Pulse = 50;
 278:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 279:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 280:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 281:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 282:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 283:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 284:Src/main.c    ****   {
 285:Src/main.c    ****     Error_Handler();
 286:Src/main.c    ****   }
 287:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 288:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 289:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 290:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 291:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 292:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 293:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 294:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 295:Src/main.c    ****   {
 296:Src/main.c    ****     Error_Handler();
 297:Src/main.c    ****   }
 298:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 299:Src/main.c    **** 
 300:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 301:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 302:Src/main.c    **** 
 303:Src/main.c    **** }
 304:Src/main.c    **** 
 305:Src/main.c    **** /**
 306:Src/main.c    ****   * @brief USB Initialization Function
 307:Src/main.c    ****   * @param None
 308:Src/main.c    ****   * @retval None
 309:Src/main.c    ****   */
 310:Src/main.c    **** 
 311:Src/main.c    **** /**
 312:Src/main.c    ****   * Enable DMA controller clock
 313:Src/main.c    ****   */
 314:Src/main.c    **** static void MX_DMA_Init(void)
 315:Src/main.c    **** {
 316:Src/main.c    **** 
 317:Src/main.c    ****   /* DMA controller clock enable */
 318:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 319:Src/main.c    **** 
ARM GAS  /tmp/ccvdBRen.s 			page 7


 320:Src/main.c    ****   /* DMA interrupt init */
 321:Src/main.c    ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 322:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 323:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 324:Src/main.c    **** 
 325:Src/main.c    **** }
 326:Src/main.c    **** 
 327:Src/main.c    **** /**
 328:Src/main.c    ****   * @brief GPIO Initialization Function
 329:Src/main.c    ****   * @param None
 330:Src/main.c    ****   * @retval None
 331:Src/main.c    ****   */
 332:Src/main.c    **** static void MX_GPIO_Init(void)
 333:Src/main.c    **** {
  25              		.loc 1 333 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 82B0     		sub	sp, sp, #8
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              	.LBB2:
 334:Src/main.c    **** 
 335:Src/main.c    ****   /* GPIO Ports Clock Enable */
 336:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  34              		.loc 1 336 0
  35 0002 0A4B     		ldr	r3, .L2
  36 0004 5969     		ldr	r1, [r3, #20]
  37 0006 8020     		movs	r0, #128
  38 0008 8002     		lsls	r0, r0, #10
  39 000a 0143     		orrs	r1, r0
  40 000c 5961     		str	r1, [r3, #20]
  41 000e 5A69     		ldr	r2, [r3, #20]
  42 0010 0240     		ands	r2, r0
  43 0012 0092     		str	r2, [sp]
  44 0014 009A     		ldr	r2, [sp]
  45              	.LBE2:
  46              	.LBB3:
 337:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  47              		.loc 1 337 0
  48 0016 5A69     		ldr	r2, [r3, #20]
  49 0018 8021     		movs	r1, #128
  50 001a C902     		lsls	r1, r1, #11
  51 001c 0A43     		orrs	r2, r1
  52 001e 5A61     		str	r2, [r3, #20]
  53 0020 5B69     		ldr	r3, [r3, #20]
  54 0022 0B40     		ands	r3, r1
  55 0024 0193     		str	r3, [sp, #4]
  56 0026 019B     		ldr	r3, [sp, #4]
  57              	.LBE3:
 338:Src/main.c    **** 
 339:Src/main.c    **** }
  58              		.loc 1 339 0
  59 0028 02B0     		add	sp, sp, #8
  60              		@ sp needed
  61 002a 7047     		bx	lr
ARM GAS  /tmp/ccvdBRen.s 			page 8


  62              	.L3:
  63              		.align	2
  64              	.L2:
  65 002c 00100240 		.word	1073876992
  66              		.cfi_endproc
  67              	.LFE45:
  69              		.section	.text.MX_SPI1_Init,"ax",%progbits
  70              		.align	1
  71              		.syntax unified
  72              		.code	16
  73              		.thumb_func
  74              		.fpu softvfp
  76              	MX_SPI1_Init:
  77              	.LFB42:
 196:Src/main.c    **** 
  78              		.loc 1 196 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82 0000 10B5     		push	{r4, lr}
  83              	.LCFI1:
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 4, -8
  86              		.cfi_offset 14, -4
 206:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
  87              		.loc 1 206 0
  88 0002 0E48     		ldr	r0, .L5
  89 0004 0E4B     		ldr	r3, .L5+4
  90 0006 0360     		str	r3, [r0]
 207:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  91              		.loc 1 207 0
  92 0008 8223     		movs	r3, #130
  93 000a 5B00     		lsls	r3, r3, #1
  94 000c 4360     		str	r3, [r0, #4]
 208:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  95              		.loc 1 208 0
  96 000e 0023     		movs	r3, #0
  97 0010 8360     		str	r3, [r0, #8]
 209:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  98              		.loc 1 209 0
  99 0012 F022     		movs	r2, #240
 100 0014 1201     		lsls	r2, r2, #4
 101 0016 C260     		str	r2, [r0, #12]
 210:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 102              		.loc 1 210 0
 103 0018 0361     		str	r3, [r0, #16]
 211:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 104              		.loc 1 211 0
 105 001a 4361     		str	r3, [r0, #20]
 212:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 106              		.loc 1 212 0
 107 001c 8022     		movs	r2, #128
 108 001e D202     		lsls	r2, r2, #11
 109 0020 8261     		str	r2, [r0, #24]
 213:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 110              		.loc 1 213 0
 111 0022 1022     		movs	r2, #16
ARM GAS  /tmp/ccvdBRen.s 			page 9


 112 0024 C261     		str	r2, [r0, #28]
 214:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 113              		.loc 1 214 0
 114 0026 0362     		str	r3, [r0, #32]
 215:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 115              		.loc 1 215 0
 116 0028 4362     		str	r3, [r0, #36]
 216:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 117              		.loc 1 216 0
 118 002a 8362     		str	r3, [r0, #40]
 217:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 119              		.loc 1 217 0
 120 002c 093A     		subs	r2, r2, #9
 121 002e C262     		str	r2, [r0, #44]
 218:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 122              		.loc 1 218 0
 123 0030 0363     		str	r3, [r0, #48]
 219:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 124              		.loc 1 219 0
 125 0032 0833     		adds	r3, r3, #8
 126 0034 4363     		str	r3, [r0, #52]
 220:Src/main.c    ****   {
 127              		.loc 1 220 0
 128 0036 FFF7FEFF 		bl	HAL_SPI_Init
 129              	.LVL0:
 228:Src/main.c    **** 
 130              		.loc 1 228 0
 131              		@ sp needed
 132 003a 10BD     		pop	{r4, pc}
 133              	.L6:
 134              		.align	2
 135              	.L5:
 136 003c 00000000 		.word	hspi1
 137 0040 00300140 		.word	1073819648
 138              		.cfi_endproc
 139              	.LFE42:
 141              		.section	.text.MX_DMA_Init,"ax",%progbits
 142              		.align	1
 143              		.syntax unified
 144              		.code	16
 145              		.thumb_func
 146              		.fpu softvfp
 148              	MX_DMA_Init:
 149              	.LFB44:
 315:Src/main.c    **** 
 150              		.loc 1 315 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 8
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154 0000 00B5     		push	{lr}
 155              	.LCFI2:
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 14, -4
 158 0002 83B0     		sub	sp, sp, #12
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 16
 161              	.LBB4:
ARM GAS  /tmp/ccvdBRen.s 			page 10


 318:Src/main.c    **** 
 162              		.loc 1 318 0
 163 0004 094A     		ldr	r2, .L8
 164 0006 5169     		ldr	r1, [r2, #20]
 165 0008 0123     		movs	r3, #1
 166 000a 1943     		orrs	r1, r3
 167 000c 5161     		str	r1, [r2, #20]
 168 000e 5269     		ldr	r2, [r2, #20]
 169 0010 1340     		ands	r3, r2
 170 0012 0193     		str	r3, [sp, #4]
 171 0014 019B     		ldr	r3, [sp, #4]
 172              	.LBE4:
 322:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 173              		.loc 1 322 0
 174 0016 0022     		movs	r2, #0
 175 0018 0021     		movs	r1, #0
 176 001a 0A20     		movs	r0, #10
 177 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 178              	.LVL1:
 323:Src/main.c    **** 
 179              		.loc 1 323 0
 180 0020 0A20     		movs	r0, #10
 181 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 182              	.LVL2:
 325:Src/main.c    **** 
 183              		.loc 1 325 0
 184 0026 03B0     		add	sp, sp, #12
 185              		@ sp needed
 186 0028 00BD     		pop	{pc}
 187              	.L9:
 188 002a C046     		.align	2
 189              	.L8:
 190 002c 00100240 		.word	1073876992
 191              		.cfi_endproc
 192              	.LFE44:
 194              		.section	.text.MX_TIM1_Init,"ax",%progbits
 195              		.align	1
 196              		.syntax unified
 197              		.code	16
 198              		.thumb_func
 199              		.fpu softvfp
 201              	MX_TIM1_Init:
 202              	.LFB43:
 236:Src/main.c    **** 
 203              		.loc 1 236 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 88
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 30B5     		push	{r4, r5, lr}
 208              	.LCFI4:
 209              		.cfi_def_cfa_offset 12
 210              		.cfi_offset 4, -12
 211              		.cfi_offset 5, -8
 212              		.cfi_offset 14, -4
 213 0002 97B0     		sub	sp, sp, #92
 214              	.LCFI5:
 215              		.cfi_def_cfa_offset 104
ARM GAS  /tmp/ccvdBRen.s 			page 11


 242:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 216              		.loc 1 242 0
 217 0004 1022     		movs	r2, #16
 218 0006 0021     		movs	r1, #0
 219 0008 12A8     		add	r0, sp, #72
 220 000a FFF7FEFF 		bl	memset
 221              	.LVL3:
 243:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 222              		.loc 1 243 0
 223 000e 0822     		movs	r2, #8
 224 0010 0021     		movs	r1, #0
 225 0012 10A8     		add	r0, sp, #64
 226 0014 FFF7FEFF 		bl	memset
 227              	.LVL4:
 244:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 228              		.loc 1 244 0
 229 0018 1C22     		movs	r2, #28
 230 001a 0021     		movs	r1, #0
 231 001c 09A8     		add	r0, sp, #36
 232 001e FFF7FEFF 		bl	memset
 233              	.LVL5:
 245:Src/main.c    **** 
 234              		.loc 1 245 0
 235 0022 2022     		movs	r2, #32
 236 0024 0021     		movs	r1, #0
 237 0026 01A8     		add	r0, sp, #4
 238 0028 FFF7FEFF 		bl	memset
 239              	.LVL6:
 250:Src/main.c    ****   htim1.Init.Prescaler = 2000;
 240              		.loc 1 250 0
 241 002c 1F4D     		ldr	r5, .L11
 242 002e 204B     		ldr	r3, .L11+4
 243 0030 2B60     		str	r3, [r5]
 251:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 244              		.loc 1 251 0
 245 0032 FA23     		movs	r3, #250
 246 0034 DB00     		lsls	r3, r3, #3
 247 0036 6B60     		str	r3, [r5, #4]
 252:Src/main.c    ****   htim1.Init.Period = 99;
 248              		.loc 1 252 0
 249 0038 0024     		movs	r4, #0
 250 003a AC60     		str	r4, [r5, #8]
 253:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 251              		.loc 1 253 0
 252 003c 6323     		movs	r3, #99
 253 003e EB60     		str	r3, [r5, #12]
 254:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 254              		.loc 1 254 0
 255 0040 2C61     		str	r4, [r5, #16]
 255:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 256              		.loc 1 255 0
 257 0042 6C61     		str	r4, [r5, #20]
 256:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 258              		.loc 1 256 0
 259 0044 AC61     		str	r4, [r5, #24]
 257:Src/main.c    ****   {
 260              		.loc 1 257 0
ARM GAS  /tmp/ccvdBRen.s 			page 12


 261 0046 2800     		movs	r0, r5
 262 0048 FFF7FEFF 		bl	HAL_TIM_Base_Init
 263              	.LVL7:
 261:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 264              		.loc 1 261 0
 265 004c 8023     		movs	r3, #128
 266 004e 5B01     		lsls	r3, r3, #5
 267 0050 1293     		str	r3, [sp, #72]
 262:Src/main.c    ****   {
 268              		.loc 1 262 0
 269 0052 12A9     		add	r1, sp, #72
 270 0054 2800     		movs	r0, r5
 271 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 272              	.LVL8:
 266:Src/main.c    ****   {
 273              		.loc 1 266 0
 274 005a 2800     		movs	r0, r5
 275 005c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 276              	.LVL9:
 270:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 277              		.loc 1 270 0
 278 0060 1094     		str	r4, [sp, #64]
 271:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 279              		.loc 1 271 0
 280 0062 1194     		str	r4, [sp, #68]
 272:Src/main.c    ****   {
 281              		.loc 1 272 0
 282 0064 10A9     		add	r1, sp, #64
 283 0066 2800     		movs	r0, r5
 284 0068 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 285              	.LVL10:
 276:Src/main.c    ****   sConfigOC.Pulse = 50;
 286              		.loc 1 276 0
 287 006c 6023     		movs	r3, #96
 288 006e 0993     		str	r3, [sp, #36]
 277:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 289              		.loc 1 277 0
 290 0070 2E3B     		subs	r3, r3, #46
 291 0072 0A93     		str	r3, [sp, #40]
 278:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 292              		.loc 1 278 0
 293 0074 0B94     		str	r4, [sp, #44]
 279:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 294              		.loc 1 279 0
 295 0076 0C94     		str	r4, [sp, #48]
 280:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 296              		.loc 1 280 0
 297 0078 0D94     		str	r4, [sp, #52]
 281:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 298              		.loc 1 281 0
 299 007a 0E94     		str	r4, [sp, #56]
 282:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 300              		.loc 1 282 0
 301 007c 0F94     		str	r4, [sp, #60]
 283:Src/main.c    ****   {
 302              		.loc 1 283 0
 303 007e 0022     		movs	r2, #0
ARM GAS  /tmp/ccvdBRen.s 			page 13


 304 0080 09A9     		add	r1, sp, #36
 305 0082 2800     		movs	r0, r5
 306 0084 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 307              	.LVL11:
 287:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 308              		.loc 1 287 0
 309 0088 0194     		str	r4, [sp, #4]
 288:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 310              		.loc 1 288 0
 311 008a 0294     		str	r4, [sp, #8]
 289:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 312              		.loc 1 289 0
 313 008c 0394     		str	r4, [sp, #12]
 290:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 314              		.loc 1 290 0
 315 008e 0494     		str	r4, [sp, #16]
 291:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 316              		.loc 1 291 0
 317 0090 0594     		str	r4, [sp, #20]
 292:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 318              		.loc 1 292 0
 319 0092 8023     		movs	r3, #128
 320 0094 9B01     		lsls	r3, r3, #6
 321 0096 0693     		str	r3, [sp, #24]
 293:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 322              		.loc 1 293 0
 323 0098 0894     		str	r4, [sp, #32]
 294:Src/main.c    ****   {
 324              		.loc 1 294 0
 325 009a 01A9     		add	r1, sp, #4
 326 009c 2800     		movs	r0, r5
 327 009e FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 328              	.LVL12:
 301:Src/main.c    **** 
 329              		.loc 1 301 0
 330 00a2 2800     		movs	r0, r5
 331 00a4 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 332              	.LVL13:
 303:Src/main.c    **** 
 333              		.loc 1 303 0
 334 00a8 17B0     		add	sp, sp, #92
 335              		@ sp needed
 336 00aa 30BD     		pop	{r4, r5, pc}
 337              	.L12:
 338              		.align	2
 339              	.L11:
 340 00ac 00000000 		.word	htim1
 341 00b0 002C0140 		.word	1073818624
 342              		.cfi_endproc
 343              	.LFE43:
 345              		.section	.text.SystemClock_Config,"ax",%progbits
 346              		.align	1
 347              		.global	SystemClock_Config
 348              		.syntax unified
 349              		.code	16
 350              		.thumb_func
 351              		.fpu softvfp
ARM GAS  /tmp/ccvdBRen.s 			page 14


 353              	SystemClock_Config:
 354              	.LFB41:
 155:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 355              		.loc 1 155 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 96
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359 0000 10B5     		push	{r4, lr}
 360              	.LCFI6:
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 4, -8
 363              		.cfi_offset 14, -4
 364 0002 98B0     		sub	sp, sp, #96
 365              	.LCFI7:
 366              		.cfi_def_cfa_offset 104
 156:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 367              		.loc 1 156 0
 368 0004 3022     		movs	r2, #48
 369 0006 0021     		movs	r1, #0
 370 0008 0CA8     		add	r0, sp, #48
 371 000a FFF7FEFF 		bl	memset
 372              	.LVL14:
 157:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 373              		.loc 1 157 0
 374 000e 1022     		movs	r2, #16
 375 0010 0021     		movs	r1, #0
 376 0012 07A8     		add	r0, sp, #28
 377 0014 FFF7FEFF 		bl	memset
 378              	.LVL15:
 158:Src/main.c    **** 
 379              		.loc 1 158 0
 380 0018 1C22     		movs	r2, #28
 381 001a 0021     		movs	r1, #0
 382 001c 6846     		mov	r0, sp
 383 001e FFF7FEFF 		bl	memset
 384              	.LVL16:
 162:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 385              		.loc 1 162 0
 386 0022 2023     		movs	r3, #32
 387 0024 0B93     		str	r3, [sp, #44]
 163:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 388              		.loc 1 163 0
 389 0026 1F3B     		subs	r3, r3, #31
 390 0028 1393     		str	r3, [sp, #76]
 165:Src/main.c    ****   {
 391              		.loc 1 165 0
 392 002a 0BA8     		add	r0, sp, #44
 393 002c FFF7FEFF 		bl	HAL_RCC_OscConfig
 394              	.LVL17:
 171:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 395              		.loc 1 171 0
 396 0030 0723     		movs	r3, #7
 397 0032 0793     		str	r3, [sp, #28]
 173:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 398              		.loc 1 173 0
 399 0034 043B     		subs	r3, r3, #4
 400 0036 0893     		str	r3, [sp, #32]
ARM GAS  /tmp/ccvdBRen.s 			page 15


 174:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 401              		.loc 1 174 0
 402 0038 0024     		movs	r4, #0
 403 003a 0994     		str	r4, [sp, #36]
 175:Src/main.c    **** 
 404              		.loc 1 175 0
 405 003c 0A94     		str	r4, [sp, #40]
 177:Src/main.c    ****   {
 406              		.loc 1 177 0
 407 003e 0121     		movs	r1, #1
 408 0040 07A8     		add	r0, sp, #28
 409 0042 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 410              	.LVL18:
 181:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 411              		.loc 1 181 0
 412 0046 8023     		movs	r3, #128
 413 0048 9B02     		lsls	r3, r3, #10
 414 004a 0093     		str	r3, [sp]
 182:Src/main.c    **** 
 415              		.loc 1 182 0
 416 004c 0694     		str	r4, [sp, #24]
 184:Src/main.c    ****   {
 417              		.loc 1 184 0
 418 004e 6846     		mov	r0, sp
 419 0050 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 420              	.LVL19:
 188:Src/main.c    **** 
 421              		.loc 1 188 0
 422 0054 18B0     		add	sp, sp, #96
 423              		@ sp needed
 424 0056 10BD     		pop	{r4, pc}
 425              		.cfi_endproc
 426              	.LFE41:
 428              		.section	.text.setPixel,"ax",%progbits
 429              		.align	1
 430              		.global	setPixel
 431              		.syntax unified
 432              		.code	16
 433              		.thumb_func
 434              		.fpu softvfp
 436              	setPixel:
 437              	.LFB46:
 340:Src/main.c    **** 
 341:Src/main.c    **** /* USER CODE BEGIN 4 */
 342:Src/main.c    **** void setPixel(uint8_t x, uint8_t y, int16_t c){
 438              		.loc 1 342 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 442              	.LVL20:
 443 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 444              	.LCFI8:
 445              		.cfi_def_cfa_offset 20
 446              		.cfi_offset 4, -20
 447              		.cfi_offset 5, -16
 448              		.cfi_offset 6, -12
 449              		.cfi_offset 7, -8
ARM GAS  /tmp/ccvdBRen.s 			page 16


 450              		.cfi_offset 14, -4
 343:Src/main.c    ****   if(x > 7 || y > 7) return;
 451              		.loc 1 343 0
 452 0002 0728     		cmp	r0, #7
 453 0004 22D8     		bhi	.L14
 454              		.loc 1 343 0 is_stmt 0 discriminator 1
 455 0006 0729     		cmp	r1, #7
 456 0008 20D8     		bhi	.L14
 344:Src/main.c    ****   if(c >= FBDEPHPOW) c = FBDEPHPOW-1;
 457              		.loc 1 344 0 is_stmt 1
 458 000a 0F2A     		cmp	r2, #15
 459 000c 03DC     		bgt	.L19
 345:Src/main.c    ****   if(c < 0) c = 0;
 460              		.loc 1 345 0
 461 000e 002A     		cmp	r2, #0
 462 0010 02DA     		bge	.L16
 463 0012 0022     		movs	r2, #0
 464              	.LVL21:
 465 0014 00E0     		b	.L16
 466              	.LVL22:
 467              	.L19:
 344:Src/main.c    ****   if(c >= FBDEPHPOW) c = FBDEPHPOW-1;
 468              		.loc 1 344 0
 469 0016 0F22     		movs	r2, #15
 470              	.LVL23:
 471              	.L16:
 344:Src/main.c    ****   if(c >= FBDEPHPOW) c = FBDEPHPOW-1;
 472              		.loc 1 344 0 is_stmt 0 discriminator 1
 473 0018 0024     		movs	r4, #0
 474 001a 15E0     		b	.L17
 475              	.LVL24:
 476              	.L18:
 477              	.LBB5:
 346:Src/main.c    ****   //c = c & 0x01;
 347:Src/main.c    ****   uint8_t cBit;
 348:Src/main.c    **** 
 349:Src/main.c    ****   for(uint8_t i = 0; i <= FBDEPH-1; i++){
 350:Src/main.c    ****     cBit = c & 0x01;
 478              		.loc 1 350 0 is_stmt 1 discriminator 3
 479 001c 0125     		movs	r5, #1
 480 001e 1540     		ands	r5, r2
 481              	.LVL25:
 351:Src/main.c    ****     fbuf[i][y] ^= (-cBit ^ fbuf[i][y]) & (1UL << x);
 482              		.loc 1 351 0 discriminator 3
 483 0020 0B4B     		ldr	r3, .L21
 484 0022 9C46     		mov	ip, r3
 485 0024 E300     		lsls	r3, r4, #3
 486 0026 5B18     		adds	r3, r3, r1
 487 0028 5B00     		lsls	r3, r3, #1
 488 002a 6646     		mov	r6, ip
 489 002c 9F5B     		ldrh	r7, [r3, r6]
 490 002e 3EB2     		sxth	r6, r7
 491 0030 6D42     		rsbs	r5, r5, #0
 492              	.LVL26:
 493 0032 6E40     		eors	r6, r5
 494 0034 B6B2     		uxth	r6, r6
 495 0036 0125     		movs	r5, #1
ARM GAS  /tmp/ccvdBRen.s 			page 17


 496              	.LVL27:
 497 0038 8540     		lsls	r5, r5, r0
 498              	.LVL28:
 499 003a 3540     		ands	r5, r6
 500 003c 7D40     		eors	r5, r7
 501 003e 6646     		mov	r6, ip
 502 0040 9D53     		strh	r5, [r3, r6]
 352:Src/main.c    ****     c = c >> 1;
 503              		.loc 1 352 0 discriminator 3
 504 0042 5210     		asrs	r2, r2, #1
 505              	.LVL29:
 349:Src/main.c    ****     cBit = c & 0x01;
 506              		.loc 1 349 0 discriminator 3
 507 0044 0134     		adds	r4, r4, #1
 508              	.LVL30:
 509 0046 E4B2     		uxtb	r4, r4
 510              	.LVL31:
 511              	.L17:
 349:Src/main.c    ****     cBit = c & 0x01;
 512              		.loc 1 349 0 is_stmt 0 discriminator 1
 513 0048 032C     		cmp	r4, #3
 514 004a E7D9     		bls	.L18
 515              	.LVL32:
 516              	.L14:
 517              	.LBE5:
 353:Src/main.c    ****   }
 354:Src/main.c    **** }
 518              		.loc 1 354 0 is_stmt 1
 519              		@ sp needed
 520 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 521              	.L22:
 522 004e C046     		.align	2
 523              	.L21:
 524 0050 00000000 		.word	fbuf
 525              		.cfi_endproc
 526              	.LFE46:
 528              		.global	__aeabi_i2d
 529              		.global	__aeabi_dmul
 530              		.global	__aeabi_ui2d
 531              		.global	__aeabi_ddiv
 532              		.global	__aeabi_dadd
 533              		.global	__aeabi_d2iz
 534              		.section	.text.main,"ax",%progbits
 535              		.align	1
 536              		.global	main
 537              		.syntax unified
 538              		.code	16
 539              		.thumb_func
 540              		.fpu softvfp
 542              	main:
 543              	.LFB40:
  83:Src/main.c    ****   /* USER CODE BEGIN 1 */
 544              		.loc 1 83 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 8
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccvdBRen.s 			page 18


 549              	.LCFI9:
 550              		.cfi_def_cfa_offset 20
 551              		.cfi_offset 4, -20
 552              		.cfi_offset 5, -16
 553              		.cfi_offset 6, -12
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 83B0     		sub	sp, sp, #12
 557              	.LCFI10:
 558              		.cfi_def_cfa_offset 32
  92:Src/main.c    **** 
 559              		.loc 1 92 0
 560 0004 FFF7FEFF 		bl	HAL_Init
 561              	.LVL33:
 100:Src/main.c    **** 
 562              		.loc 1 100 0
 563 0008 FFF7FEFF 		bl	SystemClock_Config
 564              	.LVL34:
 107:Src/main.c    ****   MX_DMA_Init();
 565              		.loc 1 107 0
 566 000c FFF7FEFF 		bl	MX_GPIO_Init
 567              	.LVL35:
 108:Src/main.c    ****   MX_SPI1_Init();
 568              		.loc 1 108 0
 569 0010 FFF7FEFF 		bl	MX_DMA_Init
 570              	.LVL36:
 109:Src/main.c    ****   MX_TIM1_Init();
 571              		.loc 1 109 0
 572 0014 FFF7FEFF 		bl	MX_SPI1_Init
 573              	.LVL37:
 110:Src/main.c    ****   /* USER CODE BEGIN 2 */
 574              		.loc 1 110 0
 575 0018 FFF7FEFF 		bl	MX_TIM1_Init
 576              	.LVL38:
 112:Src/main.c    ****   HAL_SPI_Transmit_DMA(&hspi1,cbuf,sizeof(cbuf));
 577              		.loc 1 112 0
 578 001c 504C     		ldr	r4, .L35
 579 001e 2000     		movs	r0, r4
 580 0020 FFF7FEFF 		bl	HAL_SPI_Init
 581              	.LVL39:
 113:Src/main.c    **** 
 582              		.loc 1 113 0
 583 0024 0A22     		movs	r2, #10
 584 0026 4F49     		ldr	r1, .L35+4
 585 0028 2000     		movs	r0, r4
 586 002a FFF7FEFF 		bl	HAL_SPI_Transmit_DMA
 587              	.LVL40:
 588              	.LBB6:
 115:Src/main.c    ****     for(uint8_t j = 0; j <= FBDEPH-1; j++){
 589              		.loc 1 115 0
 590 002e 0123     		movs	r3, #1
 591              	.LVL41:
 592              	.L24:
 115:Src/main.c    ****     for(uint8_t j = 0; j <= FBDEPH-1; j++){
 593              		.loc 1 115 0 is_stmt 0 discriminator 1
 594 0030 082B     		cmp	r3, #8
 595 0032 08D9     		bls	.L31
ARM GAS  /tmp/ccvdBRen.s 			page 19


 596              	.LBE6:
 121:Src/main.c    ****   HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 597              		.loc 1 121 0 is_stmt 1
 598 0034 4C4C     		ldr	r4, .L35+8
 599 0036 2000     		movs	r0, r4
 600 0038 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 601              	.LVL42:
 122:Src/main.c    **** 
 602              		.loc 1 122 0
 603 003c 0021     		movs	r1, #0
 604 003e 2000     		movs	r0, r4
 605 0040 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 606              	.LVL43:
 607 0044 83E0     		b	.L30
 608              	.LVL44:
 609              	.L31:
 610              	.LBB8:
 611              	.LBB7:
 116:Src/main.c    ****       fbuf[j][i-1] = (i << 8);
 612              		.loc 1 116 0
 613 0046 0022     		movs	r2, #0
 614              	.L26:
 615              	.LVL45:
 116:Src/main.c    ****       fbuf[j][i-1] = (i << 8);
 616              		.loc 1 116 0 is_stmt 0 discriminator 1
 617 0048 032A     		cmp	r2, #3
 618 004a 09D8     		bhi	.L33
 117:Src/main.c    ****     }
 619              		.loc 1 117 0 is_stmt 1 discriminator 3
 620 004c 5C1E     		subs	r4, r3, #1
 621 004e 1802     		lsls	r0, r3, #8
 622 0050 D100     		lsls	r1, r2, #3
 623 0052 0919     		adds	r1, r1, r4
 624 0054 4900     		lsls	r1, r1, #1
 625 0056 454C     		ldr	r4, .L35+12
 626 0058 0853     		strh	r0, [r1, r4]
 116:Src/main.c    ****       fbuf[j][i-1] = (i << 8);
 627              		.loc 1 116 0 discriminator 3
 628 005a 0132     		adds	r2, r2, #1
 629              	.LVL46:
 630 005c D2B2     		uxtb	r2, r2
 631              	.LVL47:
 632 005e F3E7     		b	.L26
 633              	.L33:
 634              	.LBE7:
 115:Src/main.c    ****     for(uint8_t j = 0; j <= FBDEPH-1; j++){
 635              		.loc 1 115 0 discriminator 2
 636 0060 0133     		adds	r3, r3, #1
 637              	.LVL48:
 638 0062 DBB2     		uxtb	r3, r3
 639              	.LVL49:
 640 0064 E4E7     		b	.L24
 641              	.LVL50:
 642              	.L28:
 643              	.LBE8:
 644              	.LBB9:
 645              	.LBB10:
ARM GAS  /tmp/ccvdBRen.s 			page 20


 135:Src/main.c    ****         //color = x*64;
 646              		.loc 1 135 0 discriminator 3
 647 0066 301F     		subs	r0, r6, #4
 648 0068 FFF7FEFF 		bl	__aeabi_i2d
 649              	.LVL51:
 650 006c 0022     		movs	r2, #0
 651 006e FF23     		movs	r3, #255
 652 0070 9B05     		lsls	r3, r3, #22
 653 0072 FFF7FEFF 		bl	__aeabi_dmul
 654              	.LVL52:
 655 0076 0400     		movs	r4, r0
 656 0078 0D00     		movs	r5, r1
 657 007a FFF7FEFF 		bl	HAL_GetTick
 658              	.LVL53:
 659 007e FFF7FEFF 		bl	__aeabi_ui2d
 660              	.LVL54:
 661 0082 0022     		movs	r2, #0
 662 0084 3A4B     		ldr	r3, .L35+16
 663 0086 FFF7FEFF 		bl	__aeabi_ddiv
 664              	.LVL55:
 665 008a FFF7FEFF 		bl	sin
 666              	.LVL56:
 667 008e 0200     		movs	r2, r0
 668 0090 0B00     		movs	r3, r1
 669 0092 2000     		movs	r0, r4
 670 0094 2900     		movs	r1, r5
 671 0096 FFF7FEFF 		bl	__aeabi_dmul
 672              	.LVL57:
 673 009a 0090     		str	r0, [sp]
 674 009c 0191     		str	r1, [sp, #4]
 675 009e 381F     		subs	r0, r7, #4
 676 00a0 FFF7FEFF 		bl	__aeabi_i2d
 677              	.LVL58:
 678 00a4 0022     		movs	r2, #0
 679 00a6 FF23     		movs	r3, #255
 680 00a8 9B05     		lsls	r3, r3, #22
 681 00aa FFF7FEFF 		bl	__aeabi_dmul
 682              	.LVL59:
 683 00ae 0400     		movs	r4, r0
 684 00b0 0D00     		movs	r5, r1
 685 00b2 FFF7FEFF 		bl	HAL_GetTick
 686              	.LVL60:
 687 00b6 FFF7FEFF 		bl	__aeabi_ui2d
 688              	.LVL61:
 689 00ba 0022     		movs	r2, #0
 690 00bc 2D4B     		ldr	r3, .L35+20
 691 00be FFF7FEFF 		bl	__aeabi_ddiv
 692              	.LVL62:
 693 00c2 FFF7FEFF 		bl	cos
 694              	.LVL63:
 695 00c6 0200     		movs	r2, r0
 696 00c8 0B00     		movs	r3, r1
 697 00ca 2000     		movs	r0, r4
 698 00cc 2900     		movs	r1, r5
 699 00ce FFF7FEFF 		bl	__aeabi_dmul
 700              	.LVL64:
 701 00d2 0200     		movs	r2, r0
ARM GAS  /tmp/ccvdBRen.s 			page 21


 702 00d4 0B00     		movs	r3, r1
 703 00d6 0098     		ldr	r0, [sp]
 704 00d8 0199     		ldr	r1, [sp, #4]
 705 00da FFF7FEFF 		bl	__aeabi_dadd
 706              	.LVL65:
 707 00de 0022     		movs	r2, #0
 708 00e0 254B     		ldr	r3, .L35+24
 709 00e2 FFF7FEFF 		bl	__aeabi_dmul
 710              	.LVL66:
 711 00e6 0400     		movs	r4, r0
 712 00e8 0D00     		movs	r5, r1
 713 00ea FFF7FEFF 		bl	HAL_GetTick
 714              	.LVL67:
 715 00ee FFF7FEFF 		bl	__aeabi_ui2d
 716              	.LVL68:
 717 00f2 0022     		movs	r2, #0
 718 00f4 214B     		ldr	r3, .L35+28
 719 00f6 FFF7FEFF 		bl	__aeabi_ddiv
 720              	.LVL69:
 721 00fa 0200     		movs	r2, r0
 722 00fc 0B00     		movs	r3, r1
 723 00fe 2000     		movs	r0, r4
 724 0100 2900     		movs	r1, r5
 725 0102 FFF7FEFF 		bl	__aeabi_dadd
 726              	.LVL70:
 727 0106 FFF7FEFF 		bl	sin
 728              	.LVL71:
 729 010a 0022     		movs	r2, #0
 730 010c 1C4B     		ldr	r3, .L35+32
 731 010e FFF7FEFF 		bl	__aeabi_dmul
 732              	.LVL72:
 733 0112 0022     		movs	r2, #0
 734 0114 1A4B     		ldr	r3, .L35+32
 735 0116 FFF7FEFF 		bl	__aeabi_dadd
 736              	.LVL73:
 737 011a FFF7FEFF 		bl	__aeabi_d2iz
 738              	.LVL74:
 739 011e 02B2     		sxth	r2, r0
 740 0120 184B     		ldr	r3, .L35+36
 741 0122 1A80     		strh	r2, [r3]
 137:Src/main.c    ****       }
 742              		.loc 1 137 0 discriminator 3
 743 0124 3900     		movs	r1, r7
 744 0126 3000     		movs	r0, r6
 745 0128 FFF7FEFF 		bl	setPixel
 746              	.LVL75:
 134:Src/main.c    ****         color = 32.0 + sin((10.0*(((x-4)/8.0)*sin(HAL_GetTick()/500.0)+((y-4)/8.0)*cos(HAL_GetTick(
 747              		.loc 1 134 0 discriminator 3
 748 012c 0137     		adds	r7, r7, #1
 749              	.LVL76:
 750 012e FFB2     		uxtb	r7, r7
 751              	.LVL77:
 752              	.L29:
 134:Src/main.c    ****         color = 32.0 + sin((10.0*(((x-4)/8.0)*sin(HAL_GetTick()/500.0)+((y-4)/8.0)*cos(HAL_GetTick(
 753              		.loc 1 134 0 is_stmt 0 discriminator 1
 754 0130 072F     		cmp	r7, #7
 755 0132 98D9     		bls	.L28
ARM GAS  /tmp/ccvdBRen.s 			page 22


 756              	.LBE10:
 133:Src/main.c    ****       for(uint8_t y = 0; y <= 7; y++){
 757              		.loc 1 133 0 is_stmt 1 discriminator 2
 758 0134 0136     		adds	r6, r6, #1
 759              	.LVL78:
 760 0136 F6B2     		uxtb	r6, r6
 761              	.LVL79:
 762              	.L27:
 133:Src/main.c    ****       for(uint8_t y = 0; y <= 7; y++){
 763              		.loc 1 133 0 is_stmt 0 discriminator 1
 764 0138 072E     		cmp	r6, #7
 765 013a 01D8     		bhi	.L34
 766              	.LBB11:
 134:Src/main.c    ****         color = 32.0 + sin((10.0*(((x-4)/8.0)*sin(HAL_GetTick()/500.0)+((y-4)/8.0)*cos(HAL_GetTick(
 767              		.loc 1 134 0 is_stmt 1
 768 013c 0027     		movs	r7, #0
 769 013e F7E7     		b	.L29
 770              	.L34:
 771              	.LBE11:
 772              	.LBE9:
 140:Src/main.c    ****     //HAL_SPI_Transmit_DMA(&hspi1,fbuf,8);
 773              		.loc 1 140 0
 774 0140 FFF7FEFF 		bl	HAL_GetTick
 775              	.LVL80:
 776 0144 104B     		ldr	r3, .L35+40
 777 0146 1B68     		ldr	r3, [r3]
 778 0148 C01A     		subs	r0, r0, r3
 779 014a 104B     		ldr	r3, .L35+44
 780 014c 1860     		str	r0, [r3]
 781              	.LVL81:
 782              	.L30:
 132:Src/main.c    ****     for(uint8_t x = 0; x <= 7; x++){
 783              		.loc 1 132 0
 784 014e FFF7FEFF 		bl	HAL_GetTick
 785              	.LVL82:
 786 0152 0D4B     		ldr	r3, .L35+40
 787 0154 1860     		str	r0, [r3]
 788 0156 0022     		movs	r2, #0
 789 0158 5A60     		str	r2, [r3, #4]
 790              	.LVL83:
 791              	.LBB12:
 133:Src/main.c    ****       for(uint8_t y = 0; y <= 7; y++){
 792              		.loc 1 133 0
 793 015a 0026     		movs	r6, #0
 794 015c ECE7     		b	.L27
 795              	.L36:
 796 015e C046     		.align	2
 797              	.L35:
 798 0160 00000000 		.word	hspi1
 799 0164 00000000 		.word	.LANCHOR0
 800 0168 00000000 		.word	htim1
 801 016c 00000000 		.word	fbuf
 802 0170 00407F40 		.word	1082081280
 803 0174 00C07240 		.word	1081262080
 804 0178 00002440 		.word	1076101120
 805 017c 0088C340 		.word	1086556160
 806 0180 00004040 		.word	1077936128
ARM GAS  /tmp/ccvdBRen.s 			page 23


 807 0184 00000000 		.word	color
 808 0188 00000000 		.word	lastTick
 809 018c 00000000 		.word	tickTime
 810              	.LBE12:
 811              		.cfi_endproc
 812              	.LFE40:
 814              		.section	.text.Error_Handler,"ax",%progbits
 815              		.align	1
 816              		.global	Error_Handler
 817              		.syntax unified
 818              		.code	16
 819              		.thumb_func
 820              		.fpu softvfp
 822              	Error_Handler:
 823              	.LFB47:
 355:Src/main.c    **** /* USER CODE END 4 */
 356:Src/main.c    **** 
 357:Src/main.c    **** /**
 358:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 359:Src/main.c    ****   * @retval None
 360:Src/main.c    ****   */
 361:Src/main.c    **** void Error_Handler(void)
 362:Src/main.c    **** {
 824              		.loc 1 362 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 0
 827              		@ frame_needed = 0, uses_anonymous_args = 0
 828              		@ link register save eliminated.
 363:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 364:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 365:Src/main.c    **** 
 366:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 367:Src/main.c    **** }
 829              		.loc 1 367 0
 830              		@ sp needed
 831 0000 7047     		bx	lr
 832              		.cfi_endproc
 833              	.LFE47:
 835              		.comm	tickTime,4,4
 836              		.comm	lastTick,8,8
 837              		.comm	color,2,2
 838              		.global	cbuf
 839              		.comm	fbuf,64,4
 840              		.global	modCnt
 841              		.comm	htim1,64,4
 842              		.comm	hdma_spi1_tx,68,4
 843              		.comm	hspi1,100,4
 844              		.section	.bss.modCnt,"aw",%nobits
 847              	modCnt:
 848 0000 00       		.space	1
 849              		.section	.data.cbuf,"aw",%progbits
 850              		.align	2
 851              		.set	.LANCHOR0,. + 0
 854              	cbuf:
 855 0000 070B     		.short	2823
 856 0002 0009     		.short	2304
 857 0004 010C     		.short	3073
ARM GAS  /tmp/ccvdBRen.s 			page 24


 858 0006 000F     		.short	3840
 859 0008 0F0A     		.short	2575
 860              		.text
 861              	.Letext0:
 862              		.file 2 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machin
 863              		.file 3 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_s
 864              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 865              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 866              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 867              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 868              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 869              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 870              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_spi.h"
 871              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 872              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 873              		.file 13 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/l
 874              		.file 14 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_
 875              		.file 15 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1
 876              		.file 16 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/r
 877              		.file 17 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/math.
 878              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 879              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 880              		.file 20 "Inc/main.h"
 881              		.file 21 "<built-in>"
ARM GAS  /tmp/ccvdBRen.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccvdBRen.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccvdBRen.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccvdBRen.s:65     .text.MX_GPIO_Init:000000000000002c $d
     /tmp/ccvdBRen.s:70     .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccvdBRen.s:76     .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccvdBRen.s:136    .text.MX_SPI1_Init:000000000000003c $d
                            *COM*:0000000000000064 hspi1
     /tmp/ccvdBRen.s:142    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccvdBRen.s:148    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccvdBRen.s:190    .text.MX_DMA_Init:000000000000002c $d
     /tmp/ccvdBRen.s:195    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccvdBRen.s:201    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccvdBRen.s:340    .text.MX_TIM1_Init:00000000000000ac $d
                            *COM*:0000000000000040 htim1
     /tmp/ccvdBRen.s:346    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccvdBRen.s:353    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccvdBRen.s:429    .text.setPixel:0000000000000000 $t
     /tmp/ccvdBRen.s:436    .text.setPixel:0000000000000000 setPixel
     /tmp/ccvdBRen.s:524    .text.setPixel:0000000000000050 $d
                            *COM*:0000000000000040 fbuf
     /tmp/ccvdBRen.s:535    .text.main:0000000000000000 $t
     /tmp/ccvdBRen.s:542    .text.main:0000000000000000 main
     /tmp/ccvdBRen.s:798    .text.main:0000000000000160 $d
                            *COM*:0000000000000002 color
                            *COM*:0000000000000008 lastTick
                            *COM*:0000000000000004 tickTime
     /tmp/ccvdBRen.s:815    .text.Error_Handler:0000000000000000 $t
     /tmp/ccvdBRen.s:822    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccvdBRen.s:854    .data.cbuf:0000000000000000 cbuf
     /tmp/ccvdBRen.s:847    .bss.modCnt:0000000000000000 modCnt
                            *COM*:0000000000000044 hdma_spi1_tx
     /tmp/ccvdBRen.s:848    .bss.modCnt:0000000000000000 $d
     /tmp/ccvdBRen.s:850    .data.cbuf:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_SPI_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_i2d
__aeabi_dmul
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dadd
__aeabi_d2iz
ARM GAS  /tmp/ccvdBRen.s 			page 26


HAL_Init
HAL_SPI_Transmit_DMA
HAL_TIM_Base_Start_IT
HAL_TIMEx_PWMN_Start
HAL_GetTick
sin
cos
