ARM GAS  /tmp/ccAhAVq6.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB46:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #define FBDEPH 4
  23:Src/main.c    **** #define FBDEPHPOW 16
  24:Src/main.c    **** #include "main.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  /tmp/ccAhAVq6.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PM */
  43:Src/main.c    **** void setPixel(uint8_t x, uint8_t y, int16_t c);
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** SPI_HandleTypeDef hspi1;
  48:Src/main.c    **** DMA_HandleTypeDef hdma_spi1_tx;
  49:Src/main.c    **** 
  50:Src/main.c    **** TIM_HandleTypeDef htim1;
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE BEGIN PV */
  53:Src/main.c    **** uint8_t modCnt = 0;
  54:Src/main.c    **** uint16_t fbuf[FBDEPH][8];
  55:Src/main.c    **** uint16_t cbuf[4]={0x0b07,   //scanLimit no limit
  56:Src/main.c    ****                   0x0900,   //decode mode none
  57:Src/main.c    ****                   0x0c01,   //shutdown off
  58:Src/main.c    ****                   0x0f00,   //display test off
  59:Src/main.c    ****                   0x0a0f};  //intensity max
  60:Src/main.c    **** int16_t color;
  61:Src/main.c    **** uint64_t lastTick;
  62:Src/main.c    **** uint32_t tickTime;
  63:Src/main.c    **** /* USER CODE END PV */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  66:Src/main.c    **** void SystemClock_Config(void);
  67:Src/main.c    **** static void MX_GPIO_Init(void);
  68:Src/main.c    **** static void MX_DMA_Init(void);
  69:Src/main.c    **** static void MX_SPI1_Init(void);
  70:Src/main.c    **** static void MX_TIM1_Init(void);
  71:Src/main.c    **** /* USER CODE BEGIN PFP */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END PFP */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  76:Src/main.c    **** /* USER CODE BEGIN 0 */
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE END 0 */
  79:Src/main.c    **** 
  80:Src/main.c    **** /**
  81:Src/main.c    ****   * @brief  The application entry point.
  82:Src/main.c    ****   * @retval int
  83:Src/main.c    ****   */
  84:Src/main.c    **** int main(void)
  85:Src/main.c    **** {
  86:Src/main.c    ****   /* USER CODE BEGIN 1 */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END 1 */
  89:Src/main.c    **** 
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
ARM GAS  /tmp/ccAhAVq6.s 			page 3


  92:Src/main.c    **** 
  93:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  94:Src/main.c    ****   HAL_Init();
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE BEGIN Init */
  97:Src/main.c    **** 
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* USER CODE END Init */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* Configure the system clock */
 102:Src/main.c    ****   SystemClock_Config();
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE END SysInit */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* Initialize all configured peripherals */
 109:Src/main.c    ****   MX_GPIO_Init();
 110:Src/main.c    ****   MX_DMA_Init();
 111:Src/main.c    ****   MX_SPI1_Init();
 112:Src/main.c    ****   MX_TIM1_Init();
 113:Src/main.c    ****   /* USER CODE BEGIN 2 */
 114:Src/main.c    ****   HAL_SPI_Init(&hspi1);
 115:Src/main.c    ****   HAL_SPI_Transmit_DMA(&hspi1,cbuf,4);
 116:Src/main.c    **** 
 117:Src/main.c    ****   for(uint8_t i = 1; i <= 8; i++){
 118:Src/main.c    ****     for(uint8_t j = 0; j <= FBDEPH-1; j++){
 119:Src/main.c    ****       fbuf[j][i-1] = (i << 8);
 120:Src/main.c    ****     }
 121:Src/main.c    ****   }
 122:Src/main.c    **** 
 123:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim1);
 124:Src/main.c    ****   HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE END 2 */
 127:Src/main.c    **** 
 128:Src/main.c    **** 
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Infinite loop */
 131:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 132:Src/main.c    ****   while (1)
 133:Src/main.c    ****   {
 134:Src/main.c    ****     lastTick = HAL_GetTick();
 135:Src/main.c    ****     for(uint8_t x = 0; x <= 7; x++){
 136:Src/main.c    ****       for(uint8_t y = 0; y <= 7; y++){
 137:Src/main.c    ****         color = 32.0 + sin((10.0*(((x-4)/8.0)*sin(HAL_GetTick()/500.0)+((y-4)/8.0)*cos(HAL_GetTick(
 138:Src/main.c    ****         //color = x*64;
 139:Src/main.c    ****         setPixel(x,y,color);
 140:Src/main.c    ****       }
 141:Src/main.c    ****     }
 142:Src/main.c    ****     tickTime = HAL_GetTick() - lastTick;
 143:Src/main.c    ****     //HAL_SPI_Transmit_DMA(&hspi1,fbuf,8);
 144:Src/main.c    ****     /* USER CODE END WHILE */
 145:Src/main.c    **** 
 146:Src/main.c    ****     /* USER CODE BEGIN 3 */
 147:Src/main.c    ****   }
 148:Src/main.c    ****   /* USER CODE END 3 */
ARM GAS  /tmp/ccAhAVq6.s 			page 4


 149:Src/main.c    **** }
 150:Src/main.c    **** 
 151:Src/main.c    **** void setPixel(uint8_t x, uint8_t y, int16_t c){
 152:Src/main.c    ****   if(x > 7 || y > 7) return;
 153:Src/main.c    ****   if(c >= FBDEPHPOW) c = FBDEPHPOW-1;
 154:Src/main.c    ****   if(c < 0) c = 0;
 155:Src/main.c    ****   //c = c & 0x01;
 156:Src/main.c    ****   uint8_t cBit;
 157:Src/main.c    **** 
 158:Src/main.c    ****   for(uint8_t i = 0; i <= FBDEPH-1; i++){
 159:Src/main.c    ****     cBit = c & 0x01;
 160:Src/main.c    ****     fbuf[i][y] ^= (-cBit ^ fbuf[i][y]) & (1UL << x);
 161:Src/main.c    ****     c = c >> 1;
 162:Src/main.c    ****   }
 163:Src/main.c    **** }
 164:Src/main.c    **** 
 165:Src/main.c    **** /**
 166:Src/main.c    ****   * @brief System Clock Configuration
 167:Src/main.c    ****   * @retval None
 168:Src/main.c    ****   */
 169:Src/main.c    **** void SystemClock_Config(void)
 170:Src/main.c    **** {
 171:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 172:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 173:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 174:Src/main.c    **** 
 175:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 176:Src/main.c    ****   */
 177:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 178:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 180:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 181:Src/main.c    ****   {
 182:Src/main.c    ****     Error_Handler();
 183:Src/main.c    ****   }
 184:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 185:Src/main.c    ****   */
 186:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 187:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 188:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 189:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 190:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 191:Src/main.c    **** 
 192:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 193:Src/main.c    ****   {
 194:Src/main.c    ****     Error_Handler();
 195:Src/main.c    ****   }
 196:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 197:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 198:Src/main.c    **** 
 199:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 200:Src/main.c    ****   {
 201:Src/main.c    ****     Error_Handler();
 202:Src/main.c    ****   }
 203:Src/main.c    **** }
 204:Src/main.c    **** 
 205:Src/main.c    **** /**
ARM GAS  /tmp/ccAhAVq6.s 			page 5


 206:Src/main.c    ****   * @brief SPI1 Initialization Function
 207:Src/main.c    ****   * @param None
 208:Src/main.c    ****   * @retval None
 209:Src/main.c    ****   */
 210:Src/main.c    **** static void MX_SPI1_Init(void)
 211:Src/main.c    **** {
 212:Src/main.c    **** 
 213:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 214:Src/main.c    **** 
 215:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 216:Src/main.c    **** 
 217:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 218:Src/main.c    **** 
 219:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 220:Src/main.c    ****   /* SPI1 parameter configuration*/
 221:Src/main.c    ****   hspi1.Instance = SPI1;
 222:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 223:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 224:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 225:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 226:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 227:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 228:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 229:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 230:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 231:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 232:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 233:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 234:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 235:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 236:Src/main.c    ****   {
 237:Src/main.c    ****     Error_Handler();
 238:Src/main.c    ****   }
 239:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 240:Src/main.c    **** 
 241:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 242:Src/main.c    **** 
 243:Src/main.c    **** }
 244:Src/main.c    **** 
 245:Src/main.c    **** /**
 246:Src/main.c    ****   * @brief TIM1 Initialization Function
 247:Src/main.c    ****   * @param None
 248:Src/main.c    ****   * @retval None
 249:Src/main.c    ****   */
 250:Src/main.c    **** static void MX_TIM1_Init(void)
 251:Src/main.c    **** {
 252:Src/main.c    **** 
 253:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 254:Src/main.c    **** 
 255:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 256:Src/main.c    **** 
 257:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 258:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 259:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 260:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 261:Src/main.c    **** 
 262:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
ARM GAS  /tmp/ccAhAVq6.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 265:Src/main.c    ****   htim1.Instance = TIM1;
 266:Src/main.c    ****   htim1.Init.Prescaler = 2000;
 267:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 268:Src/main.c    ****   htim1.Init.Period = 99;
 269:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 270:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 271:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 272:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 273:Src/main.c    ****   {
 274:Src/main.c    ****     Error_Handler();
 275:Src/main.c    ****   }
 276:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 277:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 278:Src/main.c    ****   {
 279:Src/main.c    ****     Error_Handler();
 280:Src/main.c    ****   }
 281:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 282:Src/main.c    ****   {
 283:Src/main.c    ****     Error_Handler();
 284:Src/main.c    ****   }
 285:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 286:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 287:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 288:Src/main.c    ****   {
 289:Src/main.c    ****     Error_Handler();
 290:Src/main.c    ****   }
 291:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 292:Src/main.c    ****   sConfigOC.Pulse = 50;
 293:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 294:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 295:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 296:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 297:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 298:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 299:Src/main.c    ****   {
 300:Src/main.c    ****     Error_Handler();
 301:Src/main.c    ****   }
 302:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 303:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 304:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 305:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 306:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 307:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 308:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 309:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 310:Src/main.c    ****   {
 311:Src/main.c    ****     Error_Handler();
 312:Src/main.c    ****   }
 313:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 314:Src/main.c    **** 
 315:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 316:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 317:Src/main.c    **** 
 318:Src/main.c    **** }
 319:Src/main.c    **** 
ARM GAS  /tmp/ccAhAVq6.s 			page 7


 320:Src/main.c    **** /**
 321:Src/main.c    ****   * @brief USB Initialization Function
 322:Src/main.c    ****   * @param None
 323:Src/main.c    ****   * @retval None
 324:Src/main.c    ****   */
 325:Src/main.c    **** 
 326:Src/main.c    **** /**
 327:Src/main.c    ****   * Enable DMA controller clock
 328:Src/main.c    ****   */
 329:Src/main.c    **** static void MX_DMA_Init(void)
 330:Src/main.c    **** {
 331:Src/main.c    **** 
 332:Src/main.c    ****   /* DMA controller clock enable */
 333:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 334:Src/main.c    **** 
 335:Src/main.c    ****   /* DMA interrupt init */
 336:Src/main.c    ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 337:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 338:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 339:Src/main.c    **** 
 340:Src/main.c    **** }
 341:Src/main.c    **** 
 342:Src/main.c    **** /**
 343:Src/main.c    ****   * @brief GPIO Initialization Function
 344:Src/main.c    ****   * @param None
 345:Src/main.c    ****   * @retval None
 346:Src/main.c    ****   */
 347:Src/main.c    **** static void MX_GPIO_Init(void)
 348:Src/main.c    **** {
  25              		.loc 1 348 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 82B0     		sub	sp, sp, #8
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              	.LBB2:
 349:Src/main.c    **** 
 350:Src/main.c    ****   /* GPIO Ports Clock Enable */
 351:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  34              		.loc 1 351 0
  35 0002 0A4B     		ldr	r3, .L2
  36 0004 5969     		ldr	r1, [r3, #20]
  37 0006 8020     		movs	r0, #128
  38 0008 8002     		lsls	r0, r0, #10
  39 000a 0143     		orrs	r1, r0
  40 000c 5961     		str	r1, [r3, #20]
  41 000e 5A69     		ldr	r2, [r3, #20]
  42 0010 0240     		ands	r2, r0
  43 0012 0092     		str	r2, [sp]
  44 0014 009A     		ldr	r2, [sp]
  45              	.LBE2:
  46              	.LBB3:
 352:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  47              		.loc 1 352 0
  48 0016 5A69     		ldr	r2, [r3, #20]
ARM GAS  /tmp/ccAhAVq6.s 			page 8


  49 0018 8021     		movs	r1, #128
  50 001a C902     		lsls	r1, r1, #11
  51 001c 0A43     		orrs	r2, r1
  52 001e 5A61     		str	r2, [r3, #20]
  53 0020 5B69     		ldr	r3, [r3, #20]
  54 0022 0B40     		ands	r3, r1
  55 0024 0193     		str	r3, [sp, #4]
  56 0026 019B     		ldr	r3, [sp, #4]
  57              	.LBE3:
 353:Src/main.c    **** 
 354:Src/main.c    **** }
  58              		.loc 1 354 0
  59 0028 02B0     		add	sp, sp, #8
  60              		@ sp needed
  61 002a 7047     		bx	lr
  62              	.L3:
  63              		.align	2
  64              	.L2:
  65 002c 00100240 		.word	1073876992
  66              		.cfi_endproc
  67              	.LFE46:
  69              		.section	.text.MX_SPI1_Init,"ax",%progbits
  70              		.align	1
  71              		.syntax unified
  72              		.code	16
  73              		.thumb_func
  74              		.fpu softvfp
  76              	MX_SPI1_Init:
  77              	.LFB43:
 211:Src/main.c    **** 
  78              		.loc 1 211 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82 0000 10B5     		push	{r4, lr}
  83              	.LCFI1:
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 4, -8
  86              		.cfi_offset 14, -4
 221:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
  87              		.loc 1 221 0
  88 0002 0E48     		ldr	r0, .L5
  89 0004 0E4B     		ldr	r3, .L5+4
  90 0006 0360     		str	r3, [r0]
 222:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  91              		.loc 1 222 0
  92 0008 8223     		movs	r3, #130
  93 000a 5B00     		lsls	r3, r3, #1
  94 000c 4360     		str	r3, [r0, #4]
 223:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  95              		.loc 1 223 0
  96 000e 0023     		movs	r3, #0
  97 0010 8360     		str	r3, [r0, #8]
 224:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  98              		.loc 1 224 0
  99 0012 F022     		movs	r2, #240
 100 0014 1201     		lsls	r2, r2, #4
ARM GAS  /tmp/ccAhAVq6.s 			page 9


 101 0016 C260     		str	r2, [r0, #12]
 225:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 102              		.loc 1 225 0
 103 0018 0361     		str	r3, [r0, #16]
 226:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 104              		.loc 1 226 0
 105 001a 4361     		str	r3, [r0, #20]
 227:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 106              		.loc 1 227 0
 107 001c 8022     		movs	r2, #128
 108 001e D202     		lsls	r2, r2, #11
 109 0020 8261     		str	r2, [r0, #24]
 228:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 110              		.loc 1 228 0
 111 0022 1022     		movs	r2, #16
 112 0024 C261     		str	r2, [r0, #28]
 229:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 113              		.loc 1 229 0
 114 0026 0362     		str	r3, [r0, #32]
 230:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 115              		.loc 1 230 0
 116 0028 4362     		str	r3, [r0, #36]
 231:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 117              		.loc 1 231 0
 118 002a 8362     		str	r3, [r0, #40]
 232:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 119              		.loc 1 232 0
 120 002c 093A     		subs	r2, r2, #9
 121 002e C262     		str	r2, [r0, #44]
 233:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 122              		.loc 1 233 0
 123 0030 0363     		str	r3, [r0, #48]
 234:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 124              		.loc 1 234 0
 125 0032 0833     		adds	r3, r3, #8
 126 0034 4363     		str	r3, [r0, #52]
 235:Src/main.c    ****   {
 127              		.loc 1 235 0
 128 0036 FFF7FEFF 		bl	HAL_SPI_Init
 129              	.LVL0:
 243:Src/main.c    **** 
 130              		.loc 1 243 0
 131              		@ sp needed
 132 003a 10BD     		pop	{r4, pc}
 133              	.L6:
 134              		.align	2
 135              	.L5:
 136 003c 00000000 		.word	hspi1
 137 0040 00300140 		.word	1073819648
 138              		.cfi_endproc
 139              	.LFE43:
 141              		.section	.text.MX_DMA_Init,"ax",%progbits
 142              		.align	1
 143              		.syntax unified
 144              		.code	16
 145              		.thumb_func
 146              		.fpu softvfp
ARM GAS  /tmp/ccAhAVq6.s 			page 10


 148              	MX_DMA_Init:
 149              	.LFB45:
 330:Src/main.c    **** 
 150              		.loc 1 330 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 8
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154 0000 00B5     		push	{lr}
 155              	.LCFI2:
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 14, -4
 158 0002 83B0     		sub	sp, sp, #12
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 16
 161              	.LBB4:
 333:Src/main.c    **** 
 162              		.loc 1 333 0
 163 0004 094A     		ldr	r2, .L8
 164 0006 5169     		ldr	r1, [r2, #20]
 165 0008 0123     		movs	r3, #1
 166 000a 1943     		orrs	r1, r3
 167 000c 5161     		str	r1, [r2, #20]
 168 000e 5269     		ldr	r2, [r2, #20]
 169 0010 1340     		ands	r3, r2
 170 0012 0193     		str	r3, [sp, #4]
 171 0014 019B     		ldr	r3, [sp, #4]
 172              	.LBE4:
 337:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 173              		.loc 1 337 0
 174 0016 0022     		movs	r2, #0
 175 0018 0021     		movs	r1, #0
 176 001a 0A20     		movs	r0, #10
 177 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 178              	.LVL1:
 338:Src/main.c    **** 
 179              		.loc 1 338 0
 180 0020 0A20     		movs	r0, #10
 181 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 182              	.LVL2:
 340:Src/main.c    **** 
 183              		.loc 1 340 0
 184 0026 03B0     		add	sp, sp, #12
 185              		@ sp needed
 186 0028 00BD     		pop	{pc}
 187              	.L9:
 188 002a C046     		.align	2
 189              	.L8:
 190 002c 00100240 		.word	1073876992
 191              		.cfi_endproc
 192              	.LFE45:
 194              		.section	.text.MX_TIM1_Init,"ax",%progbits
 195              		.align	1
 196              		.syntax unified
 197              		.code	16
 198              		.thumb_func
 199              		.fpu softvfp
 201              	MX_TIM1_Init:
ARM GAS  /tmp/ccAhAVq6.s 			page 11


 202              	.LFB44:
 251:Src/main.c    **** 
 203              		.loc 1 251 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 88
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 30B5     		push	{r4, r5, lr}
 208              	.LCFI4:
 209              		.cfi_def_cfa_offset 12
 210              		.cfi_offset 4, -12
 211              		.cfi_offset 5, -8
 212              		.cfi_offset 14, -4
 213 0002 97B0     		sub	sp, sp, #92
 214              	.LCFI5:
 215              		.cfi_def_cfa_offset 104
 257:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 216              		.loc 1 257 0
 217 0004 1022     		movs	r2, #16
 218 0006 0021     		movs	r1, #0
 219 0008 12A8     		add	r0, sp, #72
 220 000a FFF7FEFF 		bl	memset
 221              	.LVL3:
 258:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 222              		.loc 1 258 0
 223 000e 0822     		movs	r2, #8
 224 0010 0021     		movs	r1, #0
 225 0012 10A8     		add	r0, sp, #64
 226 0014 FFF7FEFF 		bl	memset
 227              	.LVL4:
 259:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 228              		.loc 1 259 0
 229 0018 1C22     		movs	r2, #28
 230 001a 0021     		movs	r1, #0
 231 001c 09A8     		add	r0, sp, #36
 232 001e FFF7FEFF 		bl	memset
 233              	.LVL5:
 260:Src/main.c    **** 
 234              		.loc 1 260 0
 235 0022 2022     		movs	r2, #32
 236 0024 0021     		movs	r1, #0
 237 0026 01A8     		add	r0, sp, #4
 238 0028 FFF7FEFF 		bl	memset
 239              	.LVL6:
 265:Src/main.c    ****   htim1.Init.Prescaler = 2000;
 240              		.loc 1 265 0
 241 002c 1F4D     		ldr	r5, .L11
 242 002e 204B     		ldr	r3, .L11+4
 243 0030 2B60     		str	r3, [r5]
 266:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 244              		.loc 1 266 0
 245 0032 FA23     		movs	r3, #250
 246 0034 DB00     		lsls	r3, r3, #3
 247 0036 6B60     		str	r3, [r5, #4]
 267:Src/main.c    ****   htim1.Init.Period = 99;
 248              		.loc 1 267 0
 249 0038 0024     		movs	r4, #0
 250 003a AC60     		str	r4, [r5, #8]
ARM GAS  /tmp/ccAhAVq6.s 			page 12


 268:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 251              		.loc 1 268 0
 252 003c 6323     		movs	r3, #99
 253 003e EB60     		str	r3, [r5, #12]
 269:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 254              		.loc 1 269 0
 255 0040 2C61     		str	r4, [r5, #16]
 270:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 256              		.loc 1 270 0
 257 0042 6C61     		str	r4, [r5, #20]
 271:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 258              		.loc 1 271 0
 259 0044 AC61     		str	r4, [r5, #24]
 272:Src/main.c    ****   {
 260              		.loc 1 272 0
 261 0046 2800     		movs	r0, r5
 262 0048 FFF7FEFF 		bl	HAL_TIM_Base_Init
 263              	.LVL7:
 276:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 264              		.loc 1 276 0
 265 004c 8023     		movs	r3, #128
 266 004e 5B01     		lsls	r3, r3, #5
 267 0050 1293     		str	r3, [sp, #72]
 277:Src/main.c    ****   {
 268              		.loc 1 277 0
 269 0052 12A9     		add	r1, sp, #72
 270 0054 2800     		movs	r0, r5
 271 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 272              	.LVL8:
 281:Src/main.c    ****   {
 273              		.loc 1 281 0
 274 005a 2800     		movs	r0, r5
 275 005c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 276              	.LVL9:
 285:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 277              		.loc 1 285 0
 278 0060 1094     		str	r4, [sp, #64]
 286:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 279              		.loc 1 286 0
 280 0062 1194     		str	r4, [sp, #68]
 287:Src/main.c    ****   {
 281              		.loc 1 287 0
 282 0064 10A9     		add	r1, sp, #64
 283 0066 2800     		movs	r0, r5
 284 0068 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 285              	.LVL10:
 291:Src/main.c    ****   sConfigOC.Pulse = 50;
 286              		.loc 1 291 0
 287 006c 6023     		movs	r3, #96
 288 006e 0993     		str	r3, [sp, #36]
 292:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 289              		.loc 1 292 0
 290 0070 2E3B     		subs	r3, r3, #46
 291 0072 0A93     		str	r3, [sp, #40]
 293:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 292              		.loc 1 293 0
 293 0074 0B94     		str	r4, [sp, #44]
ARM GAS  /tmp/ccAhAVq6.s 			page 13


 294:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 294              		.loc 1 294 0
 295 0076 0C94     		str	r4, [sp, #48]
 295:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 296              		.loc 1 295 0
 297 0078 0D94     		str	r4, [sp, #52]
 296:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 298              		.loc 1 296 0
 299 007a 0E94     		str	r4, [sp, #56]
 297:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 300              		.loc 1 297 0
 301 007c 0F94     		str	r4, [sp, #60]
 298:Src/main.c    ****   {
 302              		.loc 1 298 0
 303 007e 0022     		movs	r2, #0
 304 0080 09A9     		add	r1, sp, #36
 305 0082 2800     		movs	r0, r5
 306 0084 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 307              	.LVL11:
 302:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 308              		.loc 1 302 0
 309 0088 0194     		str	r4, [sp, #4]
 303:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 310              		.loc 1 303 0
 311 008a 0294     		str	r4, [sp, #8]
 304:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 312              		.loc 1 304 0
 313 008c 0394     		str	r4, [sp, #12]
 305:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 314              		.loc 1 305 0
 315 008e 0494     		str	r4, [sp, #16]
 306:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 316              		.loc 1 306 0
 317 0090 0594     		str	r4, [sp, #20]
 307:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 318              		.loc 1 307 0
 319 0092 8023     		movs	r3, #128
 320 0094 9B01     		lsls	r3, r3, #6
 321 0096 0693     		str	r3, [sp, #24]
 308:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 322              		.loc 1 308 0
 323 0098 0894     		str	r4, [sp, #32]
 309:Src/main.c    ****   {
 324              		.loc 1 309 0
 325 009a 01A9     		add	r1, sp, #4
 326 009c 2800     		movs	r0, r5
 327 009e FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 328              	.LVL12:
 316:Src/main.c    **** 
 329              		.loc 1 316 0
 330 00a2 2800     		movs	r0, r5
 331 00a4 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 332              	.LVL13:
 318:Src/main.c    **** 
 333              		.loc 1 318 0
 334 00a8 17B0     		add	sp, sp, #92
 335              		@ sp needed
ARM GAS  /tmp/ccAhAVq6.s 			page 14


 336 00aa 30BD     		pop	{r4, r5, pc}
 337              	.L12:
 338              		.align	2
 339              	.L11:
 340 00ac 00000000 		.word	htim1
 341 00b0 002C0140 		.word	1073818624
 342              		.cfi_endproc
 343              	.LFE44:
 345              		.section	.text.setPixel,"ax",%progbits
 346              		.align	1
 347              		.global	setPixel
 348              		.syntax unified
 349              		.code	16
 350              		.thumb_func
 351              		.fpu softvfp
 353              	setPixel:
 354              	.LFB41:
 151:Src/main.c    ****   if(x > 7 || y > 7) return;
 355              		.loc 1 151 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 0
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359              	.LVL14:
 360 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 361              	.LCFI6:
 362              		.cfi_def_cfa_offset 20
 363              		.cfi_offset 4, -20
 364              		.cfi_offset 5, -16
 365              		.cfi_offset 6, -12
 366              		.cfi_offset 7, -8
 367              		.cfi_offset 14, -4
 152:Src/main.c    ****   if(c >= FBDEPHPOW) c = FBDEPHPOW-1;
 368              		.loc 1 152 0
 369 0002 0728     		cmp	r0, #7
 370 0004 22D8     		bhi	.L13
 152:Src/main.c    ****   if(c >= FBDEPHPOW) c = FBDEPHPOW-1;
 371              		.loc 1 152 0 is_stmt 0 discriminator 1
 372 0006 0729     		cmp	r1, #7
 373 0008 20D8     		bhi	.L13
 153:Src/main.c    ****   if(c < 0) c = 0;
 374              		.loc 1 153 0 is_stmt 1
 375 000a 0F2A     		cmp	r2, #15
 376 000c 03DC     		bgt	.L18
 154:Src/main.c    ****   //c = c & 0x01;
 377              		.loc 1 154 0
 378 000e 002A     		cmp	r2, #0
 379 0010 02DA     		bge	.L15
 380 0012 0022     		movs	r2, #0
 381              	.LVL15:
 382 0014 00E0     		b	.L15
 383              	.LVL16:
 384              	.L18:
 153:Src/main.c    ****   if(c < 0) c = 0;
 385              		.loc 1 153 0
 386 0016 0F22     		movs	r2, #15
 387              	.LVL17:
 388              	.L15:
ARM GAS  /tmp/ccAhAVq6.s 			page 15


 153:Src/main.c    ****   if(c < 0) c = 0;
 389              		.loc 1 153 0 is_stmt 0 discriminator 1
 390 0018 0024     		movs	r4, #0
 391 001a 15E0     		b	.L16
 392              	.LVL18:
 393              	.L17:
 394              	.LBB5:
 159:Src/main.c    ****     fbuf[i][y] ^= (-cBit ^ fbuf[i][y]) & (1UL << x);
 395              		.loc 1 159 0 is_stmt 1 discriminator 3
 396 001c 0125     		movs	r5, #1
 397 001e 1540     		ands	r5, r2
 398              	.LVL19:
 160:Src/main.c    ****     c = c >> 1;
 399              		.loc 1 160 0 discriminator 3
 400 0020 0B4B     		ldr	r3, .L20
 401 0022 9C46     		mov	ip, r3
 402 0024 E300     		lsls	r3, r4, #3
 403 0026 5B18     		adds	r3, r3, r1
 404 0028 5B00     		lsls	r3, r3, #1
 405 002a 6646     		mov	r6, ip
 406 002c 9F5B     		ldrh	r7, [r3, r6]
 407 002e 3EB2     		sxth	r6, r7
 408 0030 6D42     		rsbs	r5, r5, #0
 409              	.LVL20:
 410 0032 6E40     		eors	r6, r5
 411 0034 B6B2     		uxth	r6, r6
 412 0036 0125     		movs	r5, #1
 413              	.LVL21:
 414 0038 8540     		lsls	r5, r5, r0
 415              	.LVL22:
 416 003a 3540     		ands	r5, r6
 417 003c 7D40     		eors	r5, r7
 418 003e 6646     		mov	r6, ip
 419 0040 9D53     		strh	r5, [r3, r6]
 161:Src/main.c    ****   }
 420              		.loc 1 161 0 discriminator 3
 421 0042 5210     		asrs	r2, r2, #1
 422              	.LVL23:
 158:Src/main.c    ****     cBit = c & 0x01;
 423              		.loc 1 158 0 discriminator 3
 424 0044 0134     		adds	r4, r4, #1
 425              	.LVL24:
 426 0046 E4B2     		uxtb	r4, r4
 427              	.LVL25:
 428              	.L16:
 158:Src/main.c    ****     cBit = c & 0x01;
 429              		.loc 1 158 0 is_stmt 0 discriminator 1
 430 0048 032C     		cmp	r4, #3
 431 004a E7D9     		bls	.L17
 432              	.LVL26:
 433              	.L13:
 434              	.LBE5:
 163:Src/main.c    **** 
 435              		.loc 1 163 0 is_stmt 1
 436              		@ sp needed
 437 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 438              	.L21:
ARM GAS  /tmp/ccAhAVq6.s 			page 16


 439 004e C046     		.align	2
 440              	.L20:
 441 0050 00000000 		.word	fbuf
 442              		.cfi_endproc
 443              	.LFE41:
 445              		.section	.text.SystemClock_Config,"ax",%progbits
 446              		.align	1
 447              		.global	SystemClock_Config
 448              		.syntax unified
 449              		.code	16
 450              		.thumb_func
 451              		.fpu softvfp
 453              	SystemClock_Config:
 454              	.LFB42:
 170:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 455              		.loc 1 170 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 96
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459 0000 10B5     		push	{r4, lr}
 460              	.LCFI7:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 4, -8
 463              		.cfi_offset 14, -4
 464 0002 98B0     		sub	sp, sp, #96
 465              	.LCFI8:
 466              		.cfi_def_cfa_offset 104
 171:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 467              		.loc 1 171 0
 468 0004 3022     		movs	r2, #48
 469 0006 0021     		movs	r1, #0
 470 0008 0CA8     		add	r0, sp, #48
 471 000a FFF7FEFF 		bl	memset
 472              	.LVL27:
 172:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 473              		.loc 1 172 0
 474 000e 1022     		movs	r2, #16
 475 0010 0021     		movs	r1, #0
 476 0012 07A8     		add	r0, sp, #28
 477 0014 FFF7FEFF 		bl	memset
 478              	.LVL28:
 173:Src/main.c    **** 
 479              		.loc 1 173 0
 480 0018 1C22     		movs	r2, #28
 481 001a 0021     		movs	r1, #0
 482 001c 6846     		mov	r0, sp
 483 001e FFF7FEFF 		bl	memset
 484              	.LVL29:
 177:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 485              		.loc 1 177 0
 486 0022 2023     		movs	r3, #32
 487 0024 0B93     		str	r3, [sp, #44]
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 488              		.loc 1 178 0
 489 0026 1F3B     		subs	r3, r3, #31
 490 0028 1393     		str	r3, [sp, #76]
 180:Src/main.c    ****   {
ARM GAS  /tmp/ccAhAVq6.s 			page 17


 491              		.loc 1 180 0
 492 002a 0BA8     		add	r0, sp, #44
 493 002c FFF7FEFF 		bl	HAL_RCC_OscConfig
 494              	.LVL30:
 186:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 495              		.loc 1 186 0
 496 0030 0723     		movs	r3, #7
 497 0032 0793     		str	r3, [sp, #28]
 188:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 498              		.loc 1 188 0
 499 0034 043B     		subs	r3, r3, #4
 500 0036 0893     		str	r3, [sp, #32]
 189:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 501              		.loc 1 189 0
 502 0038 0024     		movs	r4, #0
 503 003a 0994     		str	r4, [sp, #36]
 190:Src/main.c    **** 
 504              		.loc 1 190 0
 505 003c 0A94     		str	r4, [sp, #40]
 192:Src/main.c    ****   {
 506              		.loc 1 192 0
 507 003e 0121     		movs	r1, #1
 508 0040 07A8     		add	r0, sp, #28
 509 0042 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 510              	.LVL31:
 196:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 511              		.loc 1 196 0
 512 0046 8023     		movs	r3, #128
 513 0048 9B02     		lsls	r3, r3, #10
 514 004a 0093     		str	r3, [sp]
 197:Src/main.c    **** 
 515              		.loc 1 197 0
 516 004c 0694     		str	r4, [sp, #24]
 199:Src/main.c    ****   {
 517              		.loc 1 199 0
 518 004e 6846     		mov	r0, sp
 519 0050 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 520              	.LVL32:
 203:Src/main.c    **** 
 521              		.loc 1 203 0
 522 0054 18B0     		add	sp, sp, #96
 523              		@ sp needed
 524 0056 10BD     		pop	{r4, pc}
 525              		.cfi_endproc
 526              	.LFE42:
 528              		.global	__aeabi_i2d
 529              		.global	__aeabi_dmul
 530              		.global	__aeabi_ui2d
 531              		.global	__aeabi_ddiv
 532              		.global	__aeabi_dadd
 533              		.global	__aeabi_d2iz
 534              		.section	.text.main,"ax",%progbits
 535              		.align	1
 536              		.global	main
 537              		.syntax unified
 538              		.code	16
 539              		.thumb_func
ARM GAS  /tmp/ccAhAVq6.s 			page 18


 540              		.fpu softvfp
 542              	main:
 543              	.LFB40:
  85:Src/main.c    ****   /* USER CODE BEGIN 1 */
 544              		.loc 1 85 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 8
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 549              	.LCFI9:
 550              		.cfi_def_cfa_offset 20
 551              		.cfi_offset 4, -20
 552              		.cfi_offset 5, -16
 553              		.cfi_offset 6, -12
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 83B0     		sub	sp, sp, #12
 557              	.LCFI10:
 558              		.cfi_def_cfa_offset 32
  94:Src/main.c    **** 
 559              		.loc 1 94 0
 560 0004 FFF7FEFF 		bl	HAL_Init
 561              	.LVL33:
 102:Src/main.c    **** 
 562              		.loc 1 102 0
 563 0008 FFF7FEFF 		bl	SystemClock_Config
 564              	.LVL34:
 109:Src/main.c    ****   MX_DMA_Init();
 565              		.loc 1 109 0
 566 000c FFF7FEFF 		bl	MX_GPIO_Init
 567              	.LVL35:
 110:Src/main.c    ****   MX_SPI1_Init();
 568              		.loc 1 110 0
 569 0010 FFF7FEFF 		bl	MX_DMA_Init
 570              	.LVL36:
 111:Src/main.c    ****   MX_TIM1_Init();
 571              		.loc 1 111 0
 572 0014 FFF7FEFF 		bl	MX_SPI1_Init
 573              	.LVL37:
 112:Src/main.c    ****   /* USER CODE BEGIN 2 */
 574              		.loc 1 112 0
 575 0018 FFF7FEFF 		bl	MX_TIM1_Init
 576              	.LVL38:
 114:Src/main.c    ****   HAL_SPI_Transmit_DMA(&hspi1,cbuf,4);
 577              		.loc 1 114 0
 578 001c 504C     		ldr	r4, .L35
 579 001e 2000     		movs	r0, r4
 580 0020 FFF7FEFF 		bl	HAL_SPI_Init
 581              	.LVL39:
 115:Src/main.c    **** 
 582              		.loc 1 115 0
 583 0024 0422     		movs	r2, #4
 584 0026 4F49     		ldr	r1, .L35+4
 585 0028 2000     		movs	r0, r4
 586 002a FFF7FEFF 		bl	HAL_SPI_Transmit_DMA
 587              	.LVL40:
 588              	.LBB6:
ARM GAS  /tmp/ccAhAVq6.s 			page 19


 117:Src/main.c    ****     for(uint8_t j = 0; j <= FBDEPH-1; j++){
 589              		.loc 1 117 0
 590 002e 0123     		movs	r3, #1
 591              	.LVL41:
 592              	.L24:
 117:Src/main.c    ****     for(uint8_t j = 0; j <= FBDEPH-1; j++){
 593              		.loc 1 117 0 is_stmt 0 discriminator 1
 594 0030 082B     		cmp	r3, #8
 595 0032 08D9     		bls	.L31
 596              	.LBE6:
 123:Src/main.c    ****   HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 597              		.loc 1 123 0 is_stmt 1
 598 0034 4C4C     		ldr	r4, .L35+8
 599 0036 2000     		movs	r0, r4
 600 0038 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 601              	.LVL42:
 124:Src/main.c    **** 
 602              		.loc 1 124 0
 603 003c 0021     		movs	r1, #0
 604 003e 2000     		movs	r0, r4
 605 0040 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 606              	.LVL43:
 607 0044 83E0     		b	.L30
 608              	.LVL44:
 609              	.L31:
 610              	.LBB8:
 611              	.LBB7:
 118:Src/main.c    ****       fbuf[j][i-1] = (i << 8);
 612              		.loc 1 118 0
 613 0046 0022     		movs	r2, #0
 614              	.L26:
 615              	.LVL45:
 118:Src/main.c    ****       fbuf[j][i-1] = (i << 8);
 616              		.loc 1 118 0 is_stmt 0 discriminator 1
 617 0048 032A     		cmp	r2, #3
 618 004a 09D8     		bhi	.L33
 119:Src/main.c    ****     }
 619              		.loc 1 119 0 is_stmt 1 discriminator 3
 620 004c 5C1E     		subs	r4, r3, #1
 621 004e 1802     		lsls	r0, r3, #8
 622 0050 D100     		lsls	r1, r2, #3
 623 0052 0919     		adds	r1, r1, r4
 624 0054 4900     		lsls	r1, r1, #1
 625 0056 454C     		ldr	r4, .L35+12
 626 0058 0853     		strh	r0, [r1, r4]
 118:Src/main.c    ****       fbuf[j][i-1] = (i << 8);
 627              		.loc 1 118 0 discriminator 3
 628 005a 0132     		adds	r2, r2, #1
 629              	.LVL46:
 630 005c D2B2     		uxtb	r2, r2
 631              	.LVL47:
 632 005e F3E7     		b	.L26
 633              	.L33:
 634              	.LBE7:
 117:Src/main.c    ****     for(uint8_t j = 0; j <= FBDEPH-1; j++){
 635              		.loc 1 117 0 discriminator 2
 636 0060 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccAhAVq6.s 			page 20


 637              	.LVL48:
 638 0062 DBB2     		uxtb	r3, r3
 639              	.LVL49:
 640 0064 E4E7     		b	.L24
 641              	.LVL50:
 642              	.L28:
 643              	.LBE8:
 644              	.LBB9:
 645              	.LBB10:
 646              	.LBB11:
 137:Src/main.c    ****         //color = x*64;
 647              		.loc 1 137 0 discriminator 3
 648 0066 301F     		subs	r0, r6, #4
 649 0068 FFF7FEFF 		bl	__aeabi_i2d
 650              	.LVL51:
 651 006c 0022     		movs	r2, #0
 652 006e FF23     		movs	r3, #255
 653 0070 9B05     		lsls	r3, r3, #22
 654 0072 FFF7FEFF 		bl	__aeabi_dmul
 655              	.LVL52:
 656 0076 0400     		movs	r4, r0
 657 0078 0D00     		movs	r5, r1
 658 007a FFF7FEFF 		bl	HAL_GetTick
 659              	.LVL53:
 660 007e FFF7FEFF 		bl	__aeabi_ui2d
 661              	.LVL54:
 662 0082 0022     		movs	r2, #0
 663 0084 3A4B     		ldr	r3, .L35+16
 664 0086 FFF7FEFF 		bl	__aeabi_ddiv
 665              	.LVL55:
 666 008a FFF7FEFF 		bl	sin
 667              	.LVL56:
 668 008e 0200     		movs	r2, r0
 669 0090 0B00     		movs	r3, r1
 670 0092 2000     		movs	r0, r4
 671 0094 2900     		movs	r1, r5
 672 0096 FFF7FEFF 		bl	__aeabi_dmul
 673              	.LVL57:
 674 009a 0090     		str	r0, [sp]
 675 009c 0191     		str	r1, [sp, #4]
 676 009e 381F     		subs	r0, r7, #4
 677 00a0 FFF7FEFF 		bl	__aeabi_i2d
 678              	.LVL58:
 679 00a4 0022     		movs	r2, #0
 680 00a6 FF23     		movs	r3, #255
 681 00a8 9B05     		lsls	r3, r3, #22
 682 00aa FFF7FEFF 		bl	__aeabi_dmul
 683              	.LVL59:
 684 00ae 0400     		movs	r4, r0
 685 00b0 0D00     		movs	r5, r1
 686 00b2 FFF7FEFF 		bl	HAL_GetTick
 687              	.LVL60:
 688 00b6 FFF7FEFF 		bl	__aeabi_ui2d
 689              	.LVL61:
 690 00ba 0022     		movs	r2, #0
 691 00bc 2D4B     		ldr	r3, .L35+20
 692 00be FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  /tmp/ccAhAVq6.s 			page 21


 693              	.LVL62:
 694 00c2 FFF7FEFF 		bl	cos
 695              	.LVL63:
 696 00c6 0200     		movs	r2, r0
 697 00c8 0B00     		movs	r3, r1
 698 00ca 2000     		movs	r0, r4
 699 00cc 2900     		movs	r1, r5
 700 00ce FFF7FEFF 		bl	__aeabi_dmul
 701              	.LVL64:
 702 00d2 0200     		movs	r2, r0
 703 00d4 0B00     		movs	r3, r1
 704 00d6 0098     		ldr	r0, [sp]
 705 00d8 0199     		ldr	r1, [sp, #4]
 706 00da FFF7FEFF 		bl	__aeabi_dadd
 707              	.LVL65:
 708 00de 0022     		movs	r2, #0
 709 00e0 254B     		ldr	r3, .L35+24
 710 00e2 FFF7FEFF 		bl	__aeabi_dmul
 711              	.LVL66:
 712 00e6 0400     		movs	r4, r0
 713 00e8 0D00     		movs	r5, r1
 714 00ea FFF7FEFF 		bl	HAL_GetTick
 715              	.LVL67:
 716 00ee FFF7FEFF 		bl	__aeabi_ui2d
 717              	.LVL68:
 718 00f2 0022     		movs	r2, #0
 719 00f4 214B     		ldr	r3, .L35+28
 720 00f6 FFF7FEFF 		bl	__aeabi_ddiv
 721              	.LVL69:
 722 00fa 0200     		movs	r2, r0
 723 00fc 0B00     		movs	r3, r1
 724 00fe 2000     		movs	r0, r4
 725 0100 2900     		movs	r1, r5
 726 0102 FFF7FEFF 		bl	__aeabi_dadd
 727              	.LVL70:
 728 0106 FFF7FEFF 		bl	sin
 729              	.LVL71:
 730 010a 0022     		movs	r2, #0
 731 010c 1C4B     		ldr	r3, .L35+32
 732 010e FFF7FEFF 		bl	__aeabi_dmul
 733              	.LVL72:
 734 0112 0022     		movs	r2, #0
 735 0114 1A4B     		ldr	r3, .L35+32
 736 0116 FFF7FEFF 		bl	__aeabi_dadd
 737              	.LVL73:
 738 011a FFF7FEFF 		bl	__aeabi_d2iz
 739              	.LVL74:
 740 011e 02B2     		sxth	r2, r0
 741 0120 184B     		ldr	r3, .L35+36
 742 0122 1A80     		strh	r2, [r3]
 139:Src/main.c    ****       }
 743              		.loc 1 139 0 discriminator 3
 744 0124 3900     		movs	r1, r7
 745 0126 3000     		movs	r0, r6
 746 0128 FFF7FEFF 		bl	setPixel
 747              	.LVL75:
 748              	.LBE11:
ARM GAS  /tmp/ccAhAVq6.s 			page 22


 136:Src/main.c    ****         color = 32.0 + sin((10.0*(((x-4)/8.0)*sin(HAL_GetTick()/500.0)+((y-4)/8.0)*cos(HAL_GetTick(
 749              		.loc 1 136 0 discriminator 3
 750 012c 0137     		adds	r7, r7, #1
 751              	.LVL76:
 752 012e FFB2     		uxtb	r7, r7
 753              	.LVL77:
 754              	.L29:
 136:Src/main.c    ****         color = 32.0 + sin((10.0*(((x-4)/8.0)*sin(HAL_GetTick()/500.0)+((y-4)/8.0)*cos(HAL_GetTick(
 755              		.loc 1 136 0 is_stmt 0 discriminator 1
 756 0130 072F     		cmp	r7, #7
 757 0132 98D9     		bls	.L28
 758              	.LBE10:
 135:Src/main.c    ****       for(uint8_t y = 0; y <= 7; y++){
 759              		.loc 1 135 0 is_stmt 1 discriminator 2
 760 0134 0136     		adds	r6, r6, #1
 761              	.LVL78:
 762 0136 F6B2     		uxtb	r6, r6
 763              	.LVL79:
 764              	.L27:
 135:Src/main.c    ****       for(uint8_t y = 0; y <= 7; y++){
 765              		.loc 1 135 0 is_stmt 0 discriminator 1
 766 0138 072E     		cmp	r6, #7
 767 013a 01D8     		bhi	.L34
 768              	.LBB12:
 136:Src/main.c    ****         color = 32.0 + sin((10.0*(((x-4)/8.0)*sin(HAL_GetTick()/500.0)+((y-4)/8.0)*cos(HAL_GetTick(
 769              		.loc 1 136 0 is_stmt 1
 770 013c 0027     		movs	r7, #0
 771 013e F7E7     		b	.L29
 772              	.L34:
 773              	.LBE12:
 774              	.LBE9:
 142:Src/main.c    ****     //HAL_SPI_Transmit_DMA(&hspi1,fbuf,8);
 775              		.loc 1 142 0
 776 0140 FFF7FEFF 		bl	HAL_GetTick
 777              	.LVL80:
 778 0144 104B     		ldr	r3, .L35+40
 779 0146 1B68     		ldr	r3, [r3]
 780 0148 C01A     		subs	r0, r0, r3
 781 014a 104B     		ldr	r3, .L35+44
 782 014c 1860     		str	r0, [r3]
 783              	.LVL81:
 784              	.L30:
 134:Src/main.c    ****     for(uint8_t x = 0; x <= 7; x++){
 785              		.loc 1 134 0
 786 014e FFF7FEFF 		bl	HAL_GetTick
 787              	.LVL82:
 788 0152 0D4B     		ldr	r3, .L35+40
 789 0154 1860     		str	r0, [r3]
 790 0156 0022     		movs	r2, #0
 791 0158 5A60     		str	r2, [r3, #4]
 792              	.LVL83:
 793              	.LBB13:
 135:Src/main.c    ****       for(uint8_t y = 0; y <= 7; y++){
 794              		.loc 1 135 0
 795 015a 0026     		movs	r6, #0
 796 015c ECE7     		b	.L27
 797              	.L36:
ARM GAS  /tmp/ccAhAVq6.s 			page 23


 798 015e C046     		.align	2
 799              	.L35:
 800 0160 00000000 		.word	hspi1
 801 0164 00000000 		.word	.LANCHOR0
 802 0168 00000000 		.word	htim1
 803 016c 00000000 		.word	fbuf
 804 0170 00407F40 		.word	1082081280
 805 0174 00C07240 		.word	1081262080
 806 0178 00002440 		.word	1076101120
 807 017c 0088C340 		.word	1086556160
 808 0180 00004040 		.word	1077936128
 809 0184 00000000 		.word	color
 810 0188 00000000 		.word	lastTick
 811 018c 00000000 		.word	tickTime
 812              	.LBE13:
 813              		.cfi_endproc
 814              	.LFE40:
 816              		.section	.text.Error_Handler,"ax",%progbits
 817              		.align	1
 818              		.global	Error_Handler
 819              		.syntax unified
 820              		.code	16
 821              		.thumb_func
 822              		.fpu softvfp
 824              	Error_Handler:
 825              	.LFB47:
 355:Src/main.c    **** 
 356:Src/main.c    **** /* USER CODE BEGIN 4 */
 357:Src/main.c    **** 
 358:Src/main.c    **** /* USER CODE END 4 */
 359:Src/main.c    **** 
 360:Src/main.c    **** /**
 361:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 362:Src/main.c    ****   * @retval None
 363:Src/main.c    ****   */
 364:Src/main.c    **** void Error_Handler(void)
 365:Src/main.c    **** {
 826              		.loc 1 365 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830              		@ link register save eliminated.
 366:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 367:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 368:Src/main.c    **** 
 369:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 370:Src/main.c    **** }
 831              		.loc 1 370 0
 832              		@ sp needed
 833 0000 7047     		bx	lr
 834              		.cfi_endproc
 835              	.LFE47:
 837              		.comm	tickTime,4,4
 838              		.comm	lastTick,8,8
 839              		.comm	color,2,2
 840              		.global	cbuf
 841              		.comm	fbuf,64,4
ARM GAS  /tmp/ccAhAVq6.s 			page 24


 842              		.global	modCnt
 843              		.comm	htim1,64,4
 844              		.comm	hdma_spi1_tx,68,4
 845              		.comm	hspi1,100,4
 846              		.section	.bss.modCnt,"aw",%nobits
 849              	modCnt:
 850 0000 00       		.space	1
 851              		.section	.data.cbuf,"aw",%progbits
 852              		.align	2
 853              		.set	.LANCHOR0,. + 0
 856              	cbuf:
 857 0000 070B     		.short	2823
 858 0002 0009     		.short	2304
 859 0004 010C     		.short	3073
 860 0006 000F     		.short	3840
 861              		.text
 862              	.Letext0:
 863              		.file 2 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machin
 864              		.file 3 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_s
 865              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 866              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 867              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 868              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 869              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 870              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 871              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_spi.h"
 872              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 873              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 874              		.file 13 "<built-in>"
 875              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 876              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 877              		.file 16 "Inc/main.h"
ARM GAS  /tmp/ccAhAVq6.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccAhAVq6.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccAhAVq6.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccAhAVq6.s:65     .text.MX_GPIO_Init:000000000000002c $d
     /tmp/ccAhAVq6.s:70     .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccAhAVq6.s:76     .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccAhAVq6.s:136    .text.MX_SPI1_Init:000000000000003c $d
                            *COM*:0000000000000064 hspi1
     /tmp/ccAhAVq6.s:142    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccAhAVq6.s:148    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccAhAVq6.s:190    .text.MX_DMA_Init:000000000000002c $d
     /tmp/ccAhAVq6.s:195    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccAhAVq6.s:201    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccAhAVq6.s:340    .text.MX_TIM1_Init:00000000000000ac $d
                            *COM*:0000000000000040 htim1
     /tmp/ccAhAVq6.s:346    .text.setPixel:0000000000000000 $t
     /tmp/ccAhAVq6.s:353    .text.setPixel:0000000000000000 setPixel
     /tmp/ccAhAVq6.s:441    .text.setPixel:0000000000000050 $d
                            *COM*:0000000000000040 fbuf
     /tmp/ccAhAVq6.s:446    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccAhAVq6.s:453    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccAhAVq6.s:535    .text.main:0000000000000000 $t
     /tmp/ccAhAVq6.s:542    .text.main:0000000000000000 main
     /tmp/ccAhAVq6.s:800    .text.main:0000000000000160 $d
                            *COM*:0000000000000002 color
                            *COM*:0000000000000008 lastTick
                            *COM*:0000000000000004 tickTime
     /tmp/ccAhAVq6.s:817    .text.Error_Handler:0000000000000000 $t
     /tmp/ccAhAVq6.s:824    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccAhAVq6.s:856    .data.cbuf:0000000000000000 cbuf
     /tmp/ccAhAVq6.s:849    .bss.modCnt:0000000000000000 modCnt
                            *COM*:0000000000000044 hdma_spi1_tx
     /tmp/ccAhAVq6.s:850    .bss.modCnt:0000000000000000 $d
     /tmp/ccAhAVq6.s:852    .data.cbuf:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_SPI_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_i2d
__aeabi_dmul
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dadd
__aeabi_d2iz
ARM GAS  /tmp/ccAhAVq6.s 			page 26


HAL_Init
HAL_SPI_Transmit_DMA
HAL_TIM_Base_Start_IT
HAL_TIMEx_PWMN_Start
HAL_GetTick
sin
cos
